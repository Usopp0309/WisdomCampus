package com.guotop.palmschool.schoolnews.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.guotop.palmschool.common.service.CommonService;
import com.guotop.palmschool.constant.Cons;
import com.guotop.palmschool.constant.Cons.PUSHTYPE;
import com.guotop.palmschool.controller.BaseController;
import com.guotop.palmschool.entity.Clazz;
import com.guotop.palmschool.entity.Grade;
import com.guotop.palmschool.entity.Role;
import com.guotop.palmschool.entity.School;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.listener.DBContextHolder;
import com.guotop.palmschool.rest.entity.PushItem;
import com.guotop.palmschool.schoolnews.entity.SchoolNewsInfo;
import com.guotop.palmschool.schoolnews.service.SchoolNewsReleaseService;
import com.guotop.palmschool.service.ClazzService;
import com.guotop.palmschool.service.GradeService;
import com.guotop.palmschool.service.SchoolService;
import com.guotop.palmschool.service.StudentService;
import com.guotop.palmschool.service.UserService;
import com.guotop.palmschool.util.FileUploadUtil;
import com.guotop.palmschool.util.HttpPostUtil;
import com.guotop.palmschool.util.StringUtil;
import com.guotop.palmschool.util.TimeUtil;
import com.richx.pojo.PalmUser;
import com.richx.pojo.RichHttpResponse;
import com.richx.pojo.SchoolNewsContent;

import dev.gson.GsonHelper;

/**
 * 校园新闻发布控制类
 */
@RequestMapping("/schoolNewsRelease")
@Controller
public class SchoolNewsReleaseController extends BaseController
{
	Logger log = LoggerFactory.getLogger(SchoolNewsReleaseController.class);

	@Resource
	private ClazzService clazzService;

	@Resource
	private GradeService gradeService;

	@Resource
	private SchoolNewsReleaseService schoolNewsReleaseService;

	@Resource
	private UserService userService;

	@Resource
	private StudentService studentService;

	@Resource
	private CommonService commonService;

	@Resource
	private SchoolService schoolService;

	/**
	 * 进入新闻发布页面
	 */
	@RequestMapping(value = "/toSchoolNewsRelease.do")
	public String toClazzList(HttpSession session, ModelMap modelMap)
	{
		User user = (User) session.getAttribute("user");
		List<Role> roleList = user.getRoleList();
		for (Role role : roleList)
		{
			String roleCode = role.getRoleCode();
			if (commonService.hasAdminPermission(user))
			{
				modelMap.addAttribute("roleCode", "admin");
				break;
			} else if (roleCode.equals("classLeader"))
			{
				modelMap.addAttribute("roleCode", "classLeader");
				break;
			}
		}
		return "schoolnews/school_news_release";
	}

	/**
	 * 新闻发布
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/addSchoolNewsRelease.do")
	public String addSchoolNewsRelease(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setContentType("text/html;charset=UTF-8");
		int port = request.getServerPort();
		try
		{

			User user = (User) session.getAttribute("user");
			School school = schoolService.getSchoolInfoBySchoolId(Long.valueOf(user.getSchoolId()));
			Integer newsType = StringUtil.toint(request.getParameter("newsType"));
			String newsTitle = request.getParameter("newsTitle");
			String newsAuthor = request.getParameter("newsAuthor");
			String newsContent = request.getParameter("newsContent");
			String newsDigest = request.getParameter("newsDigest");
			String phone = request.getParameter("phone");
			String newsRanye = request.getParameter("newsRanye");
			String newsCover = "";
			SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
			MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
			for (Iterator it = multipartRequest.getFileNames(); it.hasNext();)
			{
				String key = (String) it.next();
				MultipartFile imgFile = multipartRequest.getFile(key);
				if (imgFile.getOriginalFilename().length() > 0)
				{
					String fileName = imgFile.getOriginalFilename();
					String uploadFilePathTemp = request.getSession().getServletContext().getRealPath("/") + "temp";
					File dir = new File(uploadFilePathTemp);
					if (!dir.exists())
					{
						dir.mkdirs();
					}
					String fileNameStr = formatter.format(new Date()) + "__" + fileName;
					File tempFile = new File(uploadFilePathTemp + "/" + fileNameStr);
					if (!tempFile.exists())
					{
						tempFile.createNewFile();
					}
					imgFile.transferTo(tempFile);
					FileUploadUtil fuu = new FileUploadUtil();
					newsCover = "schoolnews/cover/" + user.getUserId() + System.currentTimeMillis() + "/" + fileName;
					fuu.simpleUpload(tempFile.getAbsolutePath(), newsCover, Cons.QINIU_BUCKETNAME_SCHOOLRNEWS);
					tempFile.delete();
				}

			}

			String applyFunc = request.getParameter("applyFunc");
			String phoneFunc = request.getParameter("phoneFunc");

			// 1只有我要咨询功能 2 只有我要报名功能 3两者都有
			Integer functionType = 0;

			if (StringUtil.isEmpty(applyFunc) && StringUtil.isEmpty(phoneFunc))
			{
				functionType = 0;
			} else if (StringUtil.isEmpty(applyFunc) && !StringUtil.isEmpty(phoneFunc))
			{
				functionType = 1;
			} else if (!StringUtil.isEmpty(applyFunc) && StringUtil.isEmpty(phoneFunc))
			{
				functionType = 2;
			} else
			{
				functionType = 3;
			}

			SchoolNewsInfo schoolNews = new SchoolNewsInfo();
			schoolNews.setNewsType(newsType);
			schoolNews.setNewsTitle(newsTitle);
			schoolNews.setNewsAuthor(newsAuthor);
			schoolNews.setNewsContent(newsContent);
			if (!StringUtil.isEmpty(newsCover))
			{
				schoolNews.setNewsCover(Cons.QINIU_BUCKETNAME_SCHOOLRNEWS_URL + newsCover);
			}
			schoolNews.setNewsDigest(newsDigest);
			if (!StringUtil.isEmpty(phone))
			{
				schoolNews.setPhone(phone);
			}
			if (!StringUtil.isEmpty(newsRanye))
			{
				schoolNews.setNewsRanye(newsRanye);
			}
			schoolNews.setSchoolId(user.getSchoolId());
			schoolNews.setCreateUserId(user.getUserId());
			schoolNews.setCreateUserName(user.getRealName());
			schoolNews.setCreateTime(TimeUtil.getInstance().now());
			schoolNews.setStatus(1);
			schoolNews.setFunctionType(functionType);

			Integer newsId = schoolNewsReleaseService.addSchoolNewsRelease(schoolNews);

			schoolNews.setNewsId(newsId);

			String schoolId = user.getSchoolId();

			String basePath = HttpPostUtil.getWisdomCampusUrl(port);
			String newsSrc = basePath + "schoolNewsLook/forwardDetailPhone.do?newsId=" + schoolNews.getNewsId() + "&schoolId=" + schoolId;
			schoolNews.setNewsSrc(newsSrc);
			schoolNews.setSchoolName(school.getSchoolName());

			final String newsRanyeFinal = newsRanye;
			final SchoolNewsInfo schoolNewsFinal = schoolNews;
			final String schoolIdFinal = schoolId;
			new Thread(new Runnable()
			{
				public void run()
				{
					try
					{
						DBContextHolder.setDBType(schoolIdFinal);

						pushYiXin(schoolNewsFinal, newsRanyeFinal, schoolIdFinal);

					} catch (Exception e)
					{
						log.error("新闻发布推送失败" + e);
					}
				}
			}).start();

			response.getWriter().write(GsonHelper.toJson("0"));
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 发布成功后推送到亦信 newsRanye 新闻发布的范围 T0表示全校教职工 P0全部家长 G开头表示年级 C开头表示班级
	 */
	public void pushYiXin(SchoolNewsInfo schoolNews, String newsRanye, String schoolId)
	{
		RichHttpResponse<Object> richHttpResponse = new RichHttpResponse<Object>();
		try
		{
			// 查询系统管理员的信息
			User user = userService.getSysAdmin();
			String voipAccount = user.getVoipAccount();
			String pushSenderImg = user.getHeadImg();
			String pushSender = user.getRealName();
			Integer pushSenderId = StringUtil.toint(user.getUserId());
			List<User> userList = new ArrayList<User>();
			if (StringUtil.isEmpty(newsRanye))
			{
				// 如果发布范围没有选择 则发给所有的家长和教师
				List<User> parentList = userService.getAllParentList();
				userList.addAll(parentList);
				List<User> teacherlist = userService.getAllTeacher();
				userList.addAll(teacherlist);

			} else
			{
				String[] newsRanyes = newsRanye.split(",");

				for (int i = 0; i < newsRanyes.length; i++)
				{
					List<User> list = new ArrayList<User>();
					// 如果是P开头发给全部家长
					if (newsRanyes[i].startsWith("P"))
					{
						list = userService.getAllParentList();
					}
					// 如果是T开头发给全部教师
					else if (newsRanyes[i].startsWith("T"))
					{
						list = userService.getAllTeacher();
					}
					// 如果是G开头发给对应的班级的家长
					else if (newsRanyes[i].startsWith("G"))
					{
						// 获取年级ID;
						Integer gradeId = StringUtil.toint(newsRanyes[i].substring(1));
						list = userService.getAllParentListByGradeId(gradeId);
					}
					// 如果是C开头发给对应的班级的家长
					else if (newsRanyes[i].startsWith("C"))
					{
						// 获取班级ID;
						Integer clazzId = StringUtil.toint(newsRanyes[i].substring(1));

						list = userService.getAllParentListByClazz(clazzId);
					}

					userList.addAll(list);
				}
			}

			if (userList.size() > 0)
			{
				int pushType = 0;
				int pushContentType = 0;
				// 新闻类型：1、校园新闻，2、学校活动，3、学校招生信息
				if (schoolNews.getNewsType() == 1)
				{
					pushType = PUSHTYPE.SCHOOLNEWS.getType();
					pushContentType = PUSHTYPE.SCHOOLNEWS.getContentType();
				} else if (schoolNews.getNewsType() == 2)
				{
					pushType = PUSHTYPE.SCHOOLACTIVITY.getType();
					pushContentType = PUSHTYPE.SCHOOLACTIVITY.getContentType();
				} else if (schoolNews.getNewsType() == 3)
				{
					pushType = PUSHTYPE.SCHOOLRECRUITMENT.getType();
					pushContentType = PUSHTYPE.SCHOOLRECRUITMENT.getContentType();
				} else
				{
					pushType = PUSHTYPE.SCHOOLRECRUITMENT.getType();
					pushContentType = PUSHTYPE.SCHOOLRECRUITMENT.getContentType();
				}

				List<PushItem> piList = new ArrayList<PushItem>();

				for (User receiver : userList)
				{
					PushItem pi = new PushItem();
					pi.channels = receiver.getBaiduChannelId();
					pi.deviceType = String.valueOf(receiver.getDeviceType());
					pi.PushType = pushType;
					pi.PushContentType = pushContentType;
					pi.PushData = GsonHelper.toJsonWithAnnotation(schoolNews);
					pi.receiverId = receiver.getUserId();
					pi.schoolId = schoolId;
					pi.PushImage = pushSenderImg;
					pi.PushSenderId = pushSenderId;
					pi.PushSender = pushSender;
					pi.PushSenderVoipAccount = voipAccount;
					piList.add(pi);
				}
				commonService.pushMsg(piList, false);
				richHttpResponse.ResponseCode = 0;
				richHttpResponse.ResponseResult = "提交成功";
			}
		} catch (Exception e)
		{
			log.error("SchoolNewsReleaseController.pushYiXin is error : " + e.getMessage());
			richHttpResponse.ResponseCode = 1;
			richHttpResponse.ResponseResult = "提交失败";
		}
	}

	/**
	 * 进入新闻发布加载发布范围年级
	 */
	@RequestMapping(value = "/loadGradeList.do")
	public String loadGradeList(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{

			User user = (User) session.getAttribute("user");
			String roleCode = request.getParameter("roleCode");
			List<Grade> list = new ArrayList<Grade>();
			if (roleCode.equals("classLeader"))
			{
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("user", user);
				paramMap.put("userId", user.getUserId());
				paramMap.put("permissionCode", "studentMessageManager");
				// 获取班级列表（不同的人看到不同班级列表）
				List<Clazz> clazzList = commonService.getClazzList(paramMap);
				// 对班级循环，获取每个门下所有学生
				for (Clazz clazz : clazzList)
				{
					List<User> studentList = studentService.getStudentListByClazzIdInStudentSMS(clazz.getId());
					clazz.setStudentList(studentList);

				}

				/**
				 * flush到页面
				 */
				Gson gson = new Gson();
				String json = gson.toJson(clazzList);
				response.getWriter().write(json);
				response.getWriter().flush();
			} else
			{
				list = gradeService.getGradeList();
				/**
				 * flush到页面
				 */
				Gson gson = new Gson();
				String json = gson.toJson(list);
				response.getWriter().write(json);
				response.getWriter().flush();
			}

		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 进入新闻发布加载发布范围
	 */
	@RequestMapping(value = "/loadClazzList.do")
	public String loadClazzList(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{

			Integer gradeId = StringUtil.toint(request.getParameter("gradeId"));
			List<Clazz> clazzList = clazzService.getClazzListByGradeId(gradeId);
			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(clazzList);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 根据新闻 id 删除对应的新闻
	 */
	@RequestMapping(value = "/deleteSchoolNews.do")
	public String deleteSchoolNews(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{

			boolean flag = false;
			try
			{
				Integer newsId = StringUtil.toint(request.getParameter("newsId"));
				schoolNewsReleaseService.deleteSchoolNews(newsId);
				
				flag = true;
			} catch (Exception e)
			{
				flag = false;
				e.printStackTrace();
			}
			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(flag);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**************** 手机端 **********************/

	/**
	 * 【手机端】发布新闻
	 */
	@RequestMapping(value = "/addSchoolNewsReleaseByApiKey.do")
	public String addAlbumByApiKey(HttpServletRequest request, HttpSession session, ModelMap modelMap, HttpServletResponse response)
	{
		int port = request.getServerPort();
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/json;charset=UTF-8");
		RichHttpResponse<Object> rhr = new RichHttpResponse<Object>();
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		String json;
		// 这边是利用apikey 进行模拟登录
		User loginUser = userService.getUserByApiKeyAndSchoolId(apiKey, schoolId);
		try
		{
			if (loginUser != null)
			{
				session.setAttribute("user", loginUser);
				DBContextHolder.setDBType(loginUser.getSchoolId());

				School school = schoolService.getSchoolInfoBySchoolId(Long.valueOf(schoolId));

				Integer newsType = StringUtil.toint(request.getParameter("newsType"));
				String newsTitle = request.getParameter("newsTitle");
				String newsAuthor = request.getParameter("newsAuthor");
				String newsDigest = request.getParameter("newsDigest");
				String newsCover = request.getParameter("newsCover");
				String applyFunc = request.getParameter("applyFunc");
				String phoneFunc = request.getParameter("phoneFunc");
				String phone = request.getParameter("phone");

				// 1只有我要咨询功能 2 只有我要报名功能 3两者都有
				Integer functionType = 0;

				if (StringUtil.isEmpty(applyFunc) && StringUtil.isEmpty(phoneFunc))
				{
					functionType = 0;
				} else if (StringUtil.isEmpty(applyFunc) && !StringUtil.isEmpty(phoneFunc))
				{
					functionType = 1;
				} else if (!StringUtil.isEmpty(applyFunc) && StringUtil.isEmpty(phoneFunc))
				{
					functionType = 2;
				} else
				{
					functionType = 3;
				}
				String newsRanye = request.getParameter("newsRanye");
				
				String newsContent = request.getParameter("newsContent");

				String content = "";
				// 解析前台发送新闻内容
				ArrayList<SchoolNewsContent> contentList = GsonHelper.<ArrayList<SchoolNewsContent>> fromJson(newsContent, new TypeToken<ArrayList<SchoolNewsContent>>()
				{
				}.getType());

				for (SchoolNewsContent con : contentList)
				{
					if (con.type == 1)
					{
						content += "<img src=\"" + con.content + "\"/>";
					} else if (con.type == 2)
					{
						content += "<video controls=\"\" data-setup=\"{}\" preload=\"meta\" src=\"" + con.content + "\">" +"</video>";
					} else
					{
						content += "<p>" + con.content + "</p>";
					}
				}

				SchoolNewsInfo schoolNews = new SchoolNewsInfo();
				schoolNews.setNewsType(newsType);
				schoolNews.setNewsTitle(newsTitle);
				schoolNews.setNewsAuthor(newsAuthor);
				schoolNews.setNewsContent(content);
				if (!StringUtil.isEmpty(newsCover))
				{
					schoolNews.setNewsCover(newsCover);
				}
				schoolNews.setNewsDigest(newsDigest);
				if (!StringUtil.isEmpty(phone))
				{
					schoolNews.setPhone(phone);
				}
				schoolNews.setNewsRanye(newsRanye);
				schoolNews.setSchoolId(loginUser.getSchoolId());
				schoolNews.setCreateUserId(loginUser.getUserId());
				schoolNews.setCreateUserName(loginUser.getRealName());
				schoolNews.setCreateTime(TimeUtil.getInstance().now());
				schoolNews.setStatus(1);
				schoolNews.setFunctionType(functionType);

				Integer newsId = schoolNewsReleaseService.addSchoolNewsRelease(schoolNews);

				schoolNews.setNewsId(newsId);

				String basePath = HttpPostUtil.getWisdomCampusUrl(port);
				String newsSrc = basePath + "schoolNewsLook/forwardDetailPhone.do?newsId=" + schoolNews.getNewsId() + "&schoolId=" + schoolId;
				schoolNews.setNewsSrc(newsSrc);
				schoolNews.setSchoolName(school.getSchoolName());

				// 接收前台发送过来的人员列表
				String receiverListJson = request.getParameter("receiverList");

				// 解析前台发送过来的接收人列表
				ArrayList<PalmUser> receiverList = GsonHelper.<ArrayList<PalmUser>> fromJson(receiverListJson, new TypeToken<ArrayList<PalmUser>>()
				{
				}.getType());

				// 由于老师短信可以直接发送，而学生短信是通过学生查找家长手机号码之后方可发送
				ArrayList<PalmUser> receiverList_parse = new ArrayList<PalmUser>();
				// 发送类型 教师：mode == 0 学生：mode == 1
				Integer mode = Integer.valueOf(request.getParameter("mode"));

				if (mode == 0)
				{
					// 老师就不用解析直接可以使用
					receiverList_parse = receiverList;
				} else
				{
					// 学生的话需要获得他的家长手机号码
					for (PalmUser palmUser : receiverList)
					{
						List<User> studentList = studentService.getStudentListWithPartentPhoneByIdInStudentSMS(Integer.valueOf(palmUser.UserId));
						for (User studentUser : studentList)
						{
							PalmUser palmUserWithParentPhone = new PalmUser();
							palmUserWithParentPhone.UserId = palmUser.UserId;
							palmUserWithParentPhone.UserName = palmUser.UserName;
							palmUserWithParentPhone.Phone = studentUser.getPhone();
							palmUserWithParentPhone.ParentId = String.valueOf(studentUser.getParentId());
							receiverList_parse.add(palmUserWithParentPhone);
						}
					}
				}

				final ArrayList<PalmUser> receiverListFinal = receiverList_parse;
				final SchoolNewsInfo schoolNewsFinal = schoolNews;
				final String schoolIdFinal = schoolId;
				final Integer modeFinal = mode;

				new Thread(new Runnable()
				{
					public void run()
					{
						try
						{
							DBContextHolder.setDBType(schoolIdFinal);

							pushSchoolNews(schoolNewsFinal, receiverListFinal, schoolIdFinal, modeFinal);

						} catch (Exception e)
						{
							log.error("新闻发布推送失败" + e);
						}
					}
				}).start();

				rhr.ResponseCode = 0;
				rhr.ResponseResult = "新闻发布成功";
				rhr.ResponseObject = true;
				json = GsonHelper.toJson(rhr);
			} else
			{
				rhr.ResponseCode = -1;
				rhr.ResponseObject = null;
				rhr.ResponseResult = Cons.LOGIN_APIKEY_INVALID;
				json = GsonHelper.toJson(rhr);
			}

			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (IOException e)
		{
			log.error("json转换失败：" + e.getMessage());
		} catch (Exception e)
		{
			rhr.ResponseCode = -2;
			rhr.ResponseResult = "新闻发布失败";
			json = GsonHelper.toJson(rhr);

			log.error("新闻发布失败：" + e.getMessage());
		}
		return null;

	}

	/**
	 * 发布成功后推送到亦信
	 */
	public void pushSchoolNews(SchoolNewsInfo schoolNews, ArrayList<PalmUser> receiverList_parse, String schoolId, Integer mode)
	{
		RichHttpResponse<Object> richHttpResponse = new RichHttpResponse<Object>();
		try
		{
			// 查询系统管理员的信息
			User adminUser = userService.getSysAdmin();

			if (receiverList_parse.size() > 0)
			{
				int pushType = 0;
				int pushContentType = 0;
				// 新闻类型：1、校园新闻，2、学校活动，3、学校招生信息，4、家长课堂
				if (schoolNews.getNewsType() == 1)
				{
					pushType = PUSHTYPE.SCHOOLNEWS.getType();
					pushContentType = PUSHTYPE.SCHOOLNEWS.getContentType();
				} else if (schoolNews.getNewsType() == 2)
				{
					pushType = PUSHTYPE.SCHOOLACTIVITY.getType();
					pushContentType = PUSHTYPE.SCHOOLACTIVITY.getContentType();
				} else if (schoolNews.getNewsType() == 3)
				{
					pushType = PUSHTYPE.SCHOOLRECRUITMENT.getType();
					pushContentType = PUSHTYPE.SCHOOLRECRUITMENT.getContentType();
				} else
				{
					pushType = PUSHTYPE.SCHOOLRECRUITMENT.getType();
					pushContentType = PUSHTYPE.SCHOOLRECRUITMENT.getContentType();
				}

				List<PushItem> piList = new ArrayList<PushItem>();

				for (PalmUser user : receiverList_parse)
				{
					Integer userId = 0;
					if (mode == 0)
					{
						userId = StringUtil.toint(user.UserId);
					} else
					{
						userId = StringUtil.toint(user.ParentId);
					}
					User receiver = commonService.getUserByUserIdForPush(userId);
					PushItem pi = new PushItem();
					pi.channels = receiver.getBaiduChannelId();
					pi.deviceType = String.valueOf(receiver.getDeviceType());
					pi.PushType = pushType;
					pi.PushContentType = pushContentType;
					pi.PushData = GsonHelper.toJsonWithAnnotation(schoolNews);
					pi.receiverId = receiver.getUserId();
					pi.schoolId = schoolId;
					pi.PushImage = adminUser.getHeadImg();
					pi.PushSenderId = adminUser.getUserId();
					pi.PushSender = adminUser.getRealName();
					pi.PushSenderVoipAccount = adminUser.getVoipAccount();
					piList.add(pi);
				}
				commonService.pushMsg(piList, false);

				richHttpResponse.ResponseCode = 0;
				richHttpResponse.ResponseResult = "提交成功";
			}
		} catch (Exception e)
		{
			log.error("SchoolNewsReleaseController.pushYiXin is error : " + e.getMessage());
			richHttpResponse.ResponseCode = 1;
			richHttpResponse.ResponseResult = "提交失败";
		}
	}

	/**
	 * 【手机端】获取年级list
	 */
	@RequestMapping(value = "/getGradeListByApiKey.do")
	public String getGradeListByApiKey(HttpServletRequest request, HttpSession session, ModelMap modelMap, HttpServletResponse response)
	{
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/json;charset=UTF-8");
		RichHttpResponse<List<Grade>> rhr = new RichHttpResponse<List<Grade>>();
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		String json;
		// 这边是利用apikey 进行模拟登录
		User loginUser = userService.getUserByApiKeyAndSchoolId(apiKey, schoolId);
		try
		{
			if (loginUser != null)
			{
				session.setAttribute("user", loginUser);
				DBContextHolder.setDBType(loginUser.getSchoolId());

				List<Grade> gradeList = gradeService.getGradeList();

				rhr.ResponseCode = 0;
				rhr.ResponseResult = "获取成功";
				rhr.ResponseObject = gradeList;
				json = GsonHelper.toJson(rhr);
			} else
			{
				rhr.ResponseCode = -1;
				rhr.ResponseObject = null;
				rhr.ResponseResult = Cons.LOGIN_APIKEY_INVALID;
				json = GsonHelper.toJson(rhr);
			}

			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (IOException e)
		{
			log.error("json转换失败：" + e.getMessage());
		} catch (Exception e)
		{
			rhr.ResponseCode = -2;
			rhr.ResponseResult = "获取失败";
			json = GsonHelper.toJson(rhr);

			log.error("获取失败：" + e.getMessage());
		}
		return null;

	}

	/**
	 * 【手机端】获取年级下班级list
	 */
	@RequestMapping(value = "/getClazzListByApiKey.do")
	public String getClazzListByApiKey(HttpServletRequest request, HttpSession session, ModelMap modelMap, HttpServletResponse response)
	{
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/json;charset=UTF-8");
		RichHttpResponse<List<Clazz>> rhr = new RichHttpResponse<List<Clazz>>();
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		String json;
		// 这边是利用apikey 进行模拟登录
		User loginUser = userService.getUserByApiKeyAndSchoolId(apiKey, schoolId);
		try
		{
			if (loginUser != null)
			{
				session.setAttribute("user", loginUser);
				DBContextHolder.setDBType(loginUser.getSchoolId());

				Integer gradeId = StringUtil.toint(request.getParameter("gradeId"));
				List<Clazz> clazzList = clazzService.getClazzListByGradeId(gradeId);

				rhr.ResponseCode = 0;
				rhr.ResponseResult = "获取成功";
				rhr.ResponseObject = clazzList;
				json = GsonHelper.toJson(rhr);
			} else
			{
				rhr.ResponseCode = -1;
				rhr.ResponseObject = null;
				rhr.ResponseResult = Cons.LOGIN_APIKEY_INVALID;
				json = GsonHelper.toJson(rhr);
			}

			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (IOException e)
		{
			log.error("json转换失败：" + e.getMessage());
		} catch (Exception e)
		{
			rhr.ResponseCode = -2;
			rhr.ResponseResult = "获取失败";
			json = GsonHelper.toJson(rhr);

			log.error("获取失败：" + e.getMessage());
		}
		return null;

	}

	/**
	 * 【手机端】获取上传token
	 */
	@RequestMapping(value = "/getUpToken.do")
	public String getUpToken(HttpServletRequest request, HttpSession session, ModelMap modelMap, HttpServletResponse response)
	{
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/json;charset=UTF-8");
		RichHttpResponse<String> rhr = new RichHttpResponse<String>();
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		try
		{
			String json;
			// 这边是利用apikey 进行模拟登录
			User loginUser = userService.getUserByApiKeyAndSchoolId(apiKey, schoolId);
			if (loginUser != null)
			{
				session.setAttribute("user", loginUser);
				DBContextHolder.setDBType(loginUser.getSchoolId());

				FileUploadUtil fileUploadUtil = new FileUploadUtil();
				String token = fileUploadUtil.getSimpleUpToken(Cons.QINIU_BUCKETNAME_SCHOOLRNEWS);
				rhr.ResponseCode = 0;
				rhr.ResponseObject = token;
				rhr.ResponseResult = "获取成功";
				json = GsonHelper.toJson(rhr);
			} else
			{
				rhr.ResponseCode = -1;
				rhr.ResponseObject = null;
				rhr.ResponseResult = Cons.LOGIN_APIKEY_INVALID;
				json = GsonHelper.toJson(rhr);
			}
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (IOException e)
		{
			log.error("json转换失败：" + e.getMessage());
		} catch (Exception e)
		{
			log.error("获取七牛token失败：" + e.getMessage());
		}
		return null;
	}
	
	/**
	 * 根据新闻 id 删除对应的新闻
	 */
	@RequestMapping(value = "/deleteSchoolNewsByApiKey.do")
	public String deleteSchoolNewsByApiKey(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/json;charset=UTF-8");
		RichHttpResponse<Object> rhr = new RichHttpResponse<Object>();
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		Integer newsId = StringUtil.toint(request.getParameter("newsId"));
		try
		{
			String json;
			// 这边是利用apikey 进行模拟登录
			User loginUser = userService.getUserByApiKeyAndSchoolId(apiKey, schoolId);

			if (loginUser != null)
			{
				session.setAttribute("user", loginUser);
				DBContextHolder.setDBType(loginUser.getSchoolId());

				schoolNewsReleaseService.deleteSchoolNews(newsId);

				rhr.ResponseCode = 0;
				rhr.ResponseResult = "删除成功";
				json = GsonHelper.toJson(rhr);
			} else
			{
				rhr.ResponseCode = -1;
				rhr.ResponseObject = null;
				rhr.ResponseResult = Cons.LOGIN_APIKEY_INVALID;
				json = GsonHelper.toJson(rhr);
			}
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (IOException e)
		{
			log.error("json转换失败：" + e.getMessage());
		} catch (Exception e)
		{
			log.error("删除失败：" + e.getMessage());
		}
		return null;
	}

}
