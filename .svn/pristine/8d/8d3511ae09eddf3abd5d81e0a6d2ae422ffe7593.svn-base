package com.guotop.palmschool.controller;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;
import com.guotop.palmschool.common.service.CommonService;
import com.guotop.palmschool.constant.Cons;
import com.guotop.palmschool.entity.Clazz;
import com.guotop.palmschool.entity.OrderMessage;
import com.guotop.palmschool.entity.OrderMessageClazz;
import com.guotop.palmschool.entity.OrderMessageSchool;
import com.guotop.palmschool.entity.OrderMessageUser;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.listener.DBContextHolder;
import com.guotop.palmschool.service.ClazzService;
import com.guotop.palmschool.service.OrderMessageService;
import com.guotop.palmschool.service.UserService;
import com.guotop.palmschool.shopping.entity.Orders;
import com.guotop.palmschool.shopping.service.OrdersService;
import com.guotop.palmschool.util.PreciseCompute;
import com.guotop.palmschool.util.StringUtil;
import com.guotop.palmschool.util.TimeUtil;
import com.richx.pojo.RichHttpResponse;

import dev.gson.GsonHelper;

/**
 * 短信套餐
 *
 */
@RequestMapping("/orderMessage")
@Controller
public class OrderMessageController extends BaseController
{
	private Logger log = LoggerFactory.getLogger(OrderMessageController.class);
	@Resource
	private OrderMessageService orderMessageService;

	@Resource
	private OrdersService ordersService;

	@Resource
	private UserService userService;

	@Resource
	private CommonService commonService;

	@Resource
	private ClazzService clazzService;

	/**
	 * 进入短信套餐页面
	 */
	@RequestMapping(value = "/toOrderMessage.do")
	public String toOrderMessage(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		try
		{
			User user = (User) session.getAttribute("user");
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy");

			Map<String, Object> map = new HashMap<String, Object>();
			map.put("status", 0);
			map.put("rangeObject", 1);
			map.put("schoolId", user.getSchoolId());
			map.put("userId", user.getUserId());

			List<User> studentList = userService.getStudentListByParentIdAndSchoolId(map);
			if (studentList.size() > 0)
			{
				List<OrderMessage> messageList = new ArrayList<OrderMessage>();
				for (User student : studentList)
				{
					map.put("clazzId", student.getClazzId());
					// 查询出服务范围是个人的套餐
					List<OrderMessage> orderMessageList = orderMessageService.getMessageListByClazzIdForParent(map);

					for (OrderMessage orderMessage : orderMessageList)
					{
						if ("3509020027".equals(user.getSchoolId()) || "3201140009".equals(user.getSchoolId()))
						{
							if (!StringUtil.isEmpty(orderMessage.getStartTime()))
							{
								orderMessage.setStartTime(formatter.format(formatter.parse(orderMessage.getStartTime())));
							}
							if (!StringUtil.isEmpty(orderMessage.getEndTime()))
							{
								orderMessage.setEndTime(formatter.format(formatter.parse(orderMessage.getEndTime())) + "学年");
							}
						}
						orderMessage.setRealName(student.getRealName());
						orderMessage.setStudentId(student.getUserId());
						orderMessage.setClazzName(student.getClazzName());
						messageList.add(orderMessage);
					}
				}

				modelMap.addAttribute("messageList", messageList);

			}

			// 查询出服务范围是学校的套餐
			List<OrderMessage> schoolmessageList = orderMessageService.getSchoolMessageListByStatus();
			modelMap.addAttribute("schoolmessageList", schoolmessageList);
			for (OrderMessage orderMessage : schoolmessageList)
			{
				if ("3509020027".equals(user.getSchoolId()) || "3201140009".equals(user.getSchoolId()))
				{
					if (!StringUtil.isEmpty(orderMessage.getStartTime()))
					{
						orderMessage.setStartTime(formatter.format(formatter.parse(orderMessage.getStartTime())));
					}
					if (!StringUtil.isEmpty(orderMessage.getEndTime()))
					{
						orderMessage.setEndTime(formatter.format(formatter.parse(orderMessage.getEndTime())) + "学年");
					}
				}
			}
			// 获取有学校购买的学校条数套餐剩余条数
			Integer remainCount = orderMessageService.getRemainCountBySchoolIdForSchoolRange(user.getSchoolId());
			if (null == remainCount)
			{
				remainCount = 0;
			}
			modelMap.addAttribute("remainCount", remainCount);
		} catch (Exception e)
		{
			e.printStackTrace();
		}

		return "ordermessage/sms_order";
	}

	/**
	 * 进入付款页面
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/toOrderMessagePay.do")
	public String toOrderMessagePay(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("utf-8");
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		User user = (User) session.getAttribute("user");
		Integer id = StringUtil.toint(request.getParameter("id"));
		Integer count = StringUtil.toint(request.getParameter("count"));
		Integer studentId = StringUtil.toint(request.getParameter("studentId"));
		String realName = request.getParameter("realName");

		OrderMessage mess = orderMessageService.getMessageById(id);
		if (mess == null)
		{
			return toOrderMessage(request, response, session, modelMap);
		}
		double price = 0;
		if (mess.getType() == 0)
		{
			price = mess.getPrice();
		} else if (mess.getType() == 1)
		{
			price = PreciseCompute.mul(mess.getPrice(), count);
		}

		String phone = orderMessageService.getUserPhoneByUserId(user.getUserId());
		Orders orders = new Orders();
		orders.setGoodsName(mess.getName());
		orders.setAmount(String.valueOf(price));
		orders.setCounts(1);
		orders.setReceiver(user.getRealName());
		orders.setPhone(phone);
		orders.setUserId(user.getUserId());
		orders.setCreateTime(formatter.format(new Date()));
		orders.setIsVirtual(1);
		int ordersId = ordersService.addOrders(orders);

		// 获得的是自1970-1-01 00:00:00.000 到当前时刻的时间距离,类型为long
		long ct = System.currentTimeMillis();
		String currentTime = String.valueOf(ct);

		OrderMessageUser messUser = new OrderMessageUser();
		messUser.setName(mess.getName());
		messUser.setRealName(realName);
		messUser.setUserId(studentId);
		messUser.setStartTime(mess.getStartTime());
		messUser.setEndTime(mess.getEndTime());
		messUser.setType(mess.getType());
		messUser.setCount(count);
		messUser.setCreateTime(TimeUtil.getInstance().now());
		messUser.setOrderId(ordersId);
		messUser.setStatus(1);
		messUser.setMessageId(id);
		messUser.setReplaceUserId(user.getUserId());
		messUser.setReplaceRealName(user.getRealName());
		messUser.setFamilyId(String.valueOf(user.getUserId()) + currentTime);
		// 在学校的短信套餐用户信息表里插入对应的用户信息
		ordersService.saveOrderMessageUser(messUser);

		modelMap.addAttribute("amount", price);
		modelMap.addAttribute("goodsName", mess.getName());
		modelMap.addAttribute("ordersId", ordersId);

		return "ordermessage/sms_order_pay";
	}

	/**
	 * 进入付款页面(购买学校套餐)
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/toOrderMessagePayForSchoolRange.do")
	public String toOrderMessagePayForSchoolRange(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("utf-8");

		User user = (User) session.getAttribute("user");

		Integer id = StringUtil.toint(request.getParameter("id"));
		Integer count = StringUtil.toint(request.getParameter("customNumber"));

		OrderMessage mess = orderMessageService.getMessageById(id);
		if (mess == null)
		{
			return toOrderMessage(request, response, session, modelMap);
		}
		double price = 0;
		if (mess.getType() == 0)
		{
			price = mess.getPrice();
		} else if (mess.getType() == 1)
		{
			price = PreciseCompute.mul(mess.getPrice(), count);
		}

		String phone = orderMessageService.getUserPhoneByUserId(user.getUserId());
		Orders orders = new Orders();
		orders.setGoodsName(mess.getName());
		orders.setAmount(String.valueOf(price));
		orders.setCounts(1);
		orders.setReceiver(user.getRealName());
		orders.setPhone(phone);
		orders.setUserId(user.getUserId());
		orders.setCreateTime(TimeUtil.getInstance().now());
		orders.setIsVirtual(6);// 1短信套餐 2实物 3充值 4转账 5代购买短信套餐 6购买学校单条套餐
		int ordersId = ordersService.addOrders(orders);

		OrderMessageSchool messSchool = new OrderMessageSchool();
		messSchool.setName(mess.getName());
		messSchool.setSchoolId(user.getSchoolId());
		messSchool.setUserId(user.getUserId());
		messSchool.setStartTime(mess.getStartTime());
		messSchool.setEndTime(mess.getEndTime());
		messSchool.setType(mess.getType());
		messSchool.setCount(count);
		messSchool.setRemainCount(count);
		messSchool.setCreateTime(TimeUtil.getInstance().now());
		messSchool.setOrderId(ordersId);
		messSchool.setStatus(1);// 先设置为不可用，当支付成功之后更新为可用
		messSchool.setMessageId(id);
		// 在学校的短信套餐用户信息表里插入对应的用户信息
		orderMessageService.saveOrderMessageSchool(messSchool);

		modelMap.addAttribute("amount", price);
		modelMap.addAttribute("goodsName", mess.getName());
		modelMap.addAttribute("ordersId", ordersId);

		return "ordermessage/sms_order_pay";
	}

	/**
	 * 执行增加个人范围短信套餐逻辑 从学校自定义学校套餐发起的请求
	 * 
	 * @throws ParseException
	 */
	@RequestMapping(value = "/doAddMessageFromSchoolCustom.do")
	public String doAddMessageFromSchoolCustom(HttpServletResponse response, HttpServletRequest request, HttpSession session, ModelMap modelMap)
			throws ParseException
	{

		response.setCharacterEncoding("UTF-8");

		// 套餐id
		Integer id = StringUtil.toint(request.getParameter("id"));
		// 月数
		Integer count = StringUtil.toint(request.getParameter("customMonthCount"));
		// 自定义名字
		String customName = request.getParameter("customName");
		// 服务范围0:学校,1:个人
		Integer rangeObject = 1;
		// 0包时间段 1 单价/每条
		Integer type = 0;

		OrderMessage mess = orderMessageService.getMessageById(id);
		if (mess == null)
		{
			return toOrderMessage(request, response, session, modelMap);
		}
		double price = 0;
		if (mess.getType() == 0)
		{
			if (count <= 0)
			{
				return toOrderMessage(request, response, session, modelMap);
			}
			// 购买9个月之前正常计算
			// 购买10个月算9.5个月的钱
			// 购买11个月算10.5个月的钱
			// 购买12个月算11个月的钱
			if (count <= 9)
			{
				price = PreciseCompute.mul(mess.getPrice(), count);
			} else if (count == 10)
			{
				price = PreciseCompute.sub(PreciseCompute.mul(mess.getPrice(), count), PreciseCompute.mul(mess.getPrice(), 0.5));
			} else if (count == 11)
			{
				price = PreciseCompute.sub(PreciseCompute.mul(mess.getPrice(), count), PreciseCompute.mul(mess.getPrice(), 0.5));
			} else if (count == 12)
			{
				price = PreciseCompute.sub(PreciseCompute.mul(mess.getPrice(), count), PreciseCompute.mul(mess.getPrice(), 1));
			}

		} else if (mess.getType() == 1)
		{
			return toOrderMessage(request, response, session, modelMap);
		}
		OrderMessage orderMessage = new OrderMessage();
		if (StringUtil.isEmpty(customName))
		{
			orderMessage.setName(mess.getName());
		} else
		{
			orderMessage.setName(customName);
		}
		orderMessage.setPrice(Double.valueOf(price));
		orderMessage.setStatus(0);
		orderMessage.setType(type);
		orderMessage.setRangeObject(rangeObject);
		if (type == 0)
		{
			String currentDate = TimeUtil.getInstance().date();
			// 生效时间是购买时间
			orderMessage.setStartTime(currentDate);
			// 失效时间
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			Calendar calendar = Calendar.getInstance();
			Date now = formatter.parse(currentDate);
			calendar.setTime(now);
			calendar.add(Calendar.MONTH, count);
			orderMessage.setEndTime(formatter.format(calendar.getTime()));
		} else
		{
			return toOrderMessage(request, response, session, modelMap);
		}
		orderMessage.setCreateTime(TimeUtil.getInstance().now());
		// 添加套餐
		Integer orderMessageId = orderMessageService.addOrderMessage(orderMessage);

		/**
		 * 年级或班级的数组
		 */
		String[] selectedObjArr = request.getParameterValues("selectedObj");

		if (selectedObjArr != null)
		{
			for (int i = 0; i < selectedObjArr.length; i++)
			{

				if (selectedObjArr[i].startsWith("G"))
				{
					// 获取年级ID;
					Integer gradeId = StringUtil.toint(selectedObjArr[i].substring(1));
					List<Clazz> clazzList = clazzService.getClazzListByGradeId(gradeId);
					for (Clazz clazz : clazzList)
					{
						OrderMessageClazz orderMessageClazz = new OrderMessageClazz();
						orderMessageClazz.setOrderMessageId(orderMessageId);
						orderMessageClazz.setClazzId(clazz.getId());
						orderMessageClazz.setCreateTime(TimeUtil.getInstance().now());
						orderMessageService.addOrderMessageClazz(orderMessageClazz);
					}
				} else if (selectedObjArr[i].startsWith("C"))
				{
					OrderMessageClazz orderMessageClazz = new OrderMessageClazz();
					orderMessageClazz.setOrderMessageId(orderMessageId);
					orderMessageClazz.setClazzId(StringUtil.toint(selectedObjArr[i].substring(1)));
					orderMessageClazz.setCreateTime(TimeUtil.getInstance().now());
					orderMessageService.addOrderMessageClazz(orderMessageClazz);
				}
			}
		}

		return toOrderMessage(request, response, session, modelMap);
	}

	/**
	 * 根据userId和status校验用户是否已购买 或购买的套餐未过期 或条数为使用完
	 */
	@RequestMapping(value = "/checkOrderMessageByUserId.do")
	public String checkOrderMessageByUserId(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			Integer studentId = StringUtil.toint(request.getParameter("studentId"));
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("userId", studentId);
			paramMap.put("status", 0);
			OrderMessageUser messageUser = orderMessageService.getOrderMessageUserByUserId(paramMap);
			boolean flag = false;
			String result = "";
			if (messageUser != null)
			{
				flag = true;
				if (messageUser.getType() == 0)
				{
					// 包时间段套餐
					result = "该学生购买的短信时间段套餐还未过期，到期日期:" + messageUser.getEndTime() + ",请勿重复购买！";
				} else
				{
					// 购买条数套餐
					result = "该学生购买的短信条数套餐还未使用完，剩余条数:" + messageUser.getCount() + ",请勿重复购买！";
				}
			} else
			{
				flag = false;
			}
			Map<String, Object> resultMap = new HashMap<String, Object>();
			resultMap.put("flag", flag);
			resultMap.put("result", result);
			Gson gson = new Gson();
			String json = gson.toJson(resultMap);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 【手机端】进入支付页面前调用的下订单接口
	 */
	@RequestMapping(value = "/toOrderMessagePayByApiKey.do")
	public String toOrderMessagePayByApiKey(HttpServletRequest request, HttpSession session, ModelMap modelMap, HttpServletResponse response)
	{
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/json;charset=UTF-8");
		RichHttpResponse<Map<String, Object>> rhr = new RichHttpResponse<Map<String, Object>>();
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		Integer studentId = StringUtil.toint(request.getParameter("studentId"));
		String realName = request.getParameter("realName");
		
		try
		{
			String json;
			// 这边是利用apikey 进行模拟登录
			User loginUser = userService.getUserByApiKeyAndSchoolId(apiKey, schoolId);
			if (loginUser != null)
			{
				// 先判断自己有没有购买过
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("userId", studentId);
				paramMap.put("status", 0);
				OrderMessageUser messageUser = orderMessageService.getOrderMessageUserByUserId(paramMap);
				boolean flag = false;
				String result = "";
				if (messageUser != null)
				{
					flag = true;
					if (messageUser.getType() == 0)
					{
						// 包时间段套餐
						result = "该学生购买的短信时间段套餐还未过期，到期日期:" + messageUser.getEndTime() + ",请勿重复购买！";
					} else
					{
						// 购买条数套餐
						result = "该学生购买的短信条数套餐还未使用完，剩余条数:" + messageUser.getCount() + ",请勿重复购买！";
					}
				} else
				{
					flag = false;
				}
				if (flag)
				{
					rhr.ResponseCode = -2;
					rhr.ResponseResult = result;
					json = GsonHelper.toJsonWithAnnotation(rhr);
				} else
				{
					// 没有购买过套餐的处理
					session.setAttribute("user", loginUser);
					DBContextHolder.setDBType(loginUser.getSchoolId());

					Integer productId = StringUtil.toint(request.getParameter("productId"));
					Integer count = StringUtil.toint(request.getParameter("count"));
					OrderMessage mess = orderMessageService.getMessageById(productId);

					int sum = 1;
					double price = 0;
					if (mess.getType() == 0)
					{
						price = PreciseCompute.mul(mess.getPrice(), sum);
					} else if (mess.getType() == 1)
					{
						price = PreciseCompute.mul(mess.getPrice() * count, sum);
					}

					String phone = orderMessageService.getUserPhoneByUserId(loginUser.getUserId());
					Orders orders = new Orders();
					orders.setGoodsName(mess.getName());
					orders.setAmount(String.valueOf(price));
					orders.setCounts(1);
					orders.setReceiver(loginUser.getRealName());
					orders.setPhone(phone);
					orders.setUserId(loginUser.getUserId());
					orders.setCreateTime(TimeUtil.getInstance().now());
					orders.setIsVirtual(1);
					int ordersId = ordersService.addOrders(orders);

					long ct = System.currentTimeMillis();
					String currentTime = String.valueOf(ct);

					OrderMessageUser messUser = new OrderMessageUser();
					messUser.setName(mess.getName());
					messUser.setRealName(realName);
					messUser.setUserId(studentId);
					messUser.setStartTime(mess.getStartTime());
					messUser.setEndTime(mess.getEndTime());
					messUser.setType(mess.getType());
					messUser.setCount(count);
					messUser.setCreateTime(TimeUtil.getInstance().now());
					messUser.setOrderId(ordersId);
					messUser.setStatus(1);
					messUser.setMessageId(productId);
					messUser.setReplaceUserId(loginUser.getUserId());
					messUser.setReplaceRealName(loginUser.getRealName());
					messUser.setFamilyId(String.valueOf(loginUser.getUserId()) + currentTime);
					// 在学校的短信套餐用户信息表里插入对应的用户信息
					ordersService.saveOrderMessageUser(messUser);

					Map<String, Object> resultMap = new HashMap<String, Object>();
					resultMap.put("amount", price);
					resultMap.put("goodsName", mess.getName());
					resultMap.put("ordersId", ordersId);

					rhr.ResponseCode = 0;
					rhr.ResponseObject = resultMap;
					rhr.ResponseResult = "下单成功";
					json = GsonHelper.toJsonWithAnnotation(rhr);
				}
			} else
			{
				rhr.ResponseCode = -1;
				rhr.ResponseObject = null;
				rhr.ResponseResult = Cons.LOGIN_APIKEY_INVALID;
				json = GsonHelper.toJson(rhr);
			}
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (IOException e)
		{
			log.error("json转换失败：" + e.getMessage());
		} catch (Exception e)
		{
			log.error("提交订单失败：" + e.getMessage());
		}
		return null;
	}

	public static void main(String[] args) throws ParseException
	{
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		Calendar calendar = Calendar.getInstance();
		Date now = formatter.parse("2016-11-20");
		calendar.setTime(now);
		calendar.add(Calendar.MONTH, 2);
		System.out.println(formatter.format(calendar.getTime()));
	}
}
