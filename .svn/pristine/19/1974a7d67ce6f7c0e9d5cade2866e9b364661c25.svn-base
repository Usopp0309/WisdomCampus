package com.guotop.palmschool.securitydanger.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guotop.palmschool.common.service.CommonService;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.securitydanger.entity.SecurityDanger;
import com.guotop.palmschool.securitydanger.entity.SecurityDangerAttachment;
import com.guotop.palmschool.securitydanger.entity.SecurityDangerDetail;
import com.guotop.palmschool.securitydanger.service.SecurityDangerService;
import com.guotop.palmschool.securitydanger.vo.SecurityDangerType;
import com.guotop.palmschool.util.Pages;

import dev.gson.GsonHelper;

/**
 * 安全隐患
 * 
 * @author chenyong
 *
 */
@Controller
@RequestMapping("/securityDanger")
public class SecurityDangerController {

	@Autowired
	private SecurityDangerService securityDangerService;
	
	@Autowired
	private CommonService commonService;

	/**
	 * 分页获得安全隐患数据
	 * 
	 * @author chenyong
	 * @Time 2017年3月8日 下午3:57:20
	 */
	@RequestMapping("getPages.do")
	@ResponseBody
	public void getPages(HttpServletResponse response, Integer type, Integer page,HttpSession session) {
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("type", type);
		User user=(User) session.getAttribute("user");
		//管理员看全部
		if(commonService.hasAdminPermission(user)){
			paramMap.put("userId", "");
		}else{//看接收人含有自己的
			paramMap.put("userId",user.getUserId());
		}
		@SuppressWarnings("rawtypes")
		Pages pages = securityDangerService.getSecurityDangerPages(page, 30, paramMap);
		try {
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(GsonHelper.toJson(pages));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 进入安全隐患列表
	 * 
	 * @author chenyong
	 * @Time 2017年3月8日 下午4:08:45
	 */
	@RequestMapping("/toSecurityDanger.do")
	public String toSecurityDanger(Model model) {
	 List<SecurityDangerType> list=SecurityDangerType.getSecurityDangerType();
	 model.addAttribute("typeJson", GsonHelper.toJson(list));
     return "asset/asset_safe";
	}

	/**
	 * 获得安全隐患详细
	 * 
	 * @author chenyong
	 * @Time 2017年3月8日 下午8:23:27
	 */
	@RequestMapping("/getSecurityDangerDetails.do")
	@ResponseBody
	public void getSecurityDangerDetails(HttpSession session, HttpServletResponse response, Integer id) {
		SecurityDanger securityDanger = securityDangerService.getByKey(id);
		List<SecurityDangerDetail> details = securityDangerService.getDetailsByParentId(id);
		List<SecurityDangerAttachment> attachments = securityDangerService.getAttachments(id);
		securityDanger.setAttachments(attachments);
		securityDanger.setDetails(details);
		try {
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(GsonHelper.toJson(securityDanger));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}
