package com.guotop.palmschool.asset.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.guotop.palmschool.asset.entity.Asset;
import com.guotop.palmschool.asset.entity.AssetImport;
import com.guotop.palmschool.asset.entity.AssetRepair;
import com.guotop.palmschool.asset.entity.AssetRepairImg;
import com.guotop.palmschool.asset.entity.AssetServiceman;
import com.guotop.palmschool.asset.service.AssetService;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.service.BaseService;
import com.guotop.palmschool.util.Pages;

@Service("assetService")
public class AssetServiceImpl extends BaseService implements AssetService
{

	/**
	 * 获取资产列表（分页）
	 * 
	 * @param page
	 * @param pageSize
	 * @param paramMap
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Pages getAssetList(int page, int pageSize, Map<String, Object> paramMap)
	{
		final int offset = Pages.countOffset(pageSize, page);
		final int length = pageSize;
		int currentPage = Pages.countCurrentPage(page);

		// 解决ibatis框架的分页问题
		// 起始数据坐标
		paramMap.put("startIndex", offset);
		// 单页数据量
		paramMap.put("length", length);

		int allRow = (Integer) getBaseDao().selectObjectByObject("Asset.getAssetListCount", paramMap);
		int totalPage = Pages.countTotalPage(pageSize, allRow);
		List<Asset> list = getBaseDao().selectListByObject("Asset.getAssetList", paramMap);

		Pages pages = new Pages();
		pages.setPageSize(pageSize);
		/**
		 * 如果总页数为0，当前页也应该为0
		 */
		if (0 == totalPage)
		{
			currentPage = 0;
		}
		pages.setCurrentPage(currentPage);
		pages.setAllRow(allRow);
		pages.setTotalPage(totalPage);
		pages.setList(list);
		pages.init();
		return pages;
	}
	
	/**
	 * 获取资产导入列表（分页）
	 * @param page
	 * @param pageSize
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Pages getImportList(int page,int pageSize)
	{
		final int offset = Pages.countOffset(pageSize, page);
		final int length = pageSize;
		int currentPage = Pages.countCurrentPage(page);

		Map<String,Object> paramMap = new HashMap<String, Object>();
		// 起始数据坐标
		paramMap.put("startIndex", offset);
		// 单页数据量
		paramMap.put("length", length);

		int allRow = (Integer) getBaseDao().selectObjectByObject("Asset.getImportListCount",null);
		int totalPage = Pages.countTotalPage(pageSize, allRow);
		List<AssetImport> list = getBaseDao().selectListByObject("Asset.getImportList", paramMap);

		Pages pages = new Pages();
		pages.setPageSize(pageSize);
		/**
		 * 如果总页数为0，当前页也应该为0
		 */
		if (0 == totalPage)
		{
			currentPage = 0;
		}
		pages.setCurrentPage(currentPage);
		pages.setAllRow(allRow);
		pages.setTotalPage(totalPage);
		pages.setList(list);
		pages.init();
		return pages;
	}

	@Override
	public Integer addAsset(Asset asset)
	{
		return (Integer)getBaseDao().addObject("Asset.addAsset", asset);
	}
	
	@Override
	public void modifyAsset(Asset asset)
	{
		getBaseDao().updateObject("Asset.modifyAsset", asset);
	}

	@Override
	public Asset getAssetDetailById(Integer id)
	{
		return (Asset) getBaseDao().selectObject("Asset.getAssetDetailById", id);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Asset>getAllAssetListByType(Integer type)
	{
		return (List<Asset>) getBaseDao().selectList("Asset.getAllAssetListByType", type);
	}

	@Override
	public void deleteAssetById(Integer id)
	{
		getBaseDao().deleteObjectById("Asset.deleteAssetById", id);
		deleteAssetRepairByAssetId(id);
	}

	@Override
	public void deleteAssetRepairByAssetId(Integer assetId)
	{
		getBaseDao().deleteObjectById("Asset.deleteAssetRepairByAssetId", assetId);
	}

	@Override
	public boolean checkCode(Map<String, Object> paramMap)
	{
		Integer count = (Integer) getBaseDao().selectObjectByObject("Asset.checkCode", paramMap);
		if(count>0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	@Override
	public void addAssetImport(AssetImport imp)
	{
		getBaseDao().addObject("Asset.addAssetImport", imp);
	}
	
	@Override
	public boolean isServiceman(Integer userId)
	{
		Integer count = (Integer) getBaseDao().selectObjectByObject("Asset.isServiceman", userId);
		if(count>0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	/**
	 * 添加维修信息
	 * @param repair
	 * @return
	 */
	public Integer addAssetRepair(AssetRepair repair)
	{
		return (Integer)getBaseDao().addObject("Asset.addAssetRepair", repair);
	}
	
	/**
	 * 添加维修信息图片
	 * @param repairImg
	 */
	public void addAssetRepairImg(AssetRepairImg repairImg)
	{
		getBaseDao().addObject("Asset.addAssetRepairImg", repairImg);
	}
	
	/**
	 * 获取维修人员列表（分页）
	 * @param page
	 * @param pageSize
	 * @param paramMap
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Pages getServicemanList( int page,int pageSize,Map<String, Object> paramMap)
	{
		final int offset = Pages.countOffset(pageSize, page);
		final int length = pageSize;
		int currentPage = Pages.countCurrentPage(page);

		// 起始数据坐标
		paramMap.put("startIndex", offset);
		// 单页数据量
		paramMap.put("length", length);

		int allRow = (Integer) getBaseDao().selectObjectByObject("Asset.getServicemanListCount",paramMap);
		int totalPage = Pages.countTotalPage(pageSize, allRow);
		List<AssetServiceman> list = getBaseDao().selectListByObject("Asset.getServicemanList", paramMap);

		Pages pages = new Pages();
		pages.setPageSize(pageSize);
		/**
		 * 如果总页数为0，当前页也应该为0
		 */
		if (0 == totalPage)
		{
			currentPage = 0;
		}
		pages.setCurrentPage(currentPage);
		pages.setAllRow(allRow);
		pages.setTotalPage(totalPage);
		pages.setList(list);
		pages.init();
		return pages;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<AssetServiceman>getAllServicemanListByType(Integer type)
	{
		return (List<AssetServiceman>) getBaseDao().selectList("Asset.getAllServicemanListByType", type);
	}
	
	/**
	 * 根据维修人员ID获取对应的负责人用户推送消息
	 * @param servicemanId
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<User> getLeaderListByServicemanIdForPush(Integer servicemanId)
	{
		List<AssetServiceman> servicemanList = getBaseDao().selectList("Asset.getServicemanByServicemanId", servicemanId);
		List<User> list = new ArrayList<>();
		for(AssetServiceman man : servicemanList)
		{
			User user1 = (User) getBaseDao().selectObject("User.getUserByUserIdForPush", man.getLeaderIdOne());
			if(user1 != null)
			{
				list.add(user1);
			}
			User user2 = (User) getBaseDao().selectObject("User.getUserByUserIdForPush", man.getLeaderIdTwo());
			if(user2 != null)
			{
				list.add(user2);
			}
		}
		return list;
	}

	/**
	 * 添加维修人员
	 * @param serviceman
	 */
	public void addAssetServiceman(AssetServiceman serviceman)
	{
		getBaseDao().addObject("Asset.addAssetServiceman", serviceman);
	}
	
	/**
	 * 根据登录人获取维修列表
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Pages getAssetRepairList(int page, int pageSize,String personnelType,Map<String, Object> paramMap)
	{
		final int offset = Pages.countOffset(pageSize, page);
		final int length = pageSize;
		int currentPage = Pages.countCurrentPage(page);
		int allRow = 0;
		// 起始数据坐标
		paramMap.put("startIndex", offset);
		// 单页数据量
		paramMap.put("length", length);
		List<AssetRepair>  list = new ArrayList<>();
		if(personnelType.equals("leader"))//领导可以 查看自己报修的或者维修人是自己或者自己是维修人的领导
		{
			
			allRow = (Integer) getBaseDao().selectObjectByObject("Asset.getAssetRepairListForLeaderCount",paramMap);
			
			list = getBaseDao().selectListByObject("Asset.getAssetRepairListForLeader", paramMap);

		}
		else if(personnelType.equals("serviceman"))//维修人员获取自己报修的和维修人员是自己的
		{
			allRow = (Integer) getBaseDao().selectObjectByObject("Asset.getAssetRepairListForServicemanCount",paramMap);
			
			list = getBaseDao().selectListByObject("Asset.getAssetRepairListForServiceman", paramMap);
		}
		else//普通人员看到自己报修的列表
		{
			allRow = (Integer) getBaseDao().selectObjectByObject("Asset.getAssetRepairListForRepairCount",paramMap);
			
			list = getBaseDao().selectListByObject("Asset.getAssetRepairListForRepair", paramMap);
		}

		
		int totalPage = Pages.countTotalPage(pageSize, allRow);
		Pages pages = new Pages();
		pages.setPageSize(pageSize);
		/**
		 * 如果总页数为0，当前页也应该为0
		 */
		if (0 == totalPage)
		{
			currentPage = 0;
		}
		pages.setCurrentPage(currentPage);
		pages.setAllRow(allRow);
		pages.setTotalPage(totalPage);
		pages.setList(list);
		pages.init();
		return pages;
	}
	
	/**
	 * 根据ID获取维修详情
	 * @param id
	 * @return
	 */
	public AssetRepair getAssetRepairDetailById(Integer id)
	{
		return (AssetRepair)getBaseDao().selectObject("Asset.getAssetRepairDetailById", id);
	}
	/**
	 * 根据ID获取维修详情
	 * @param id
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<AssetRepairImg> getAssetRepairImgListByRepairId(Integer id)
	{
		return (List<AssetRepairImg>)getBaseDao().selectList("Asset.getAssetRepairImgListByRepairId", id);
	}
	
	public void updateAsserRepair(AssetRepair repair)
	{
		getBaseDao().updateObject("Asset.updateAsserRepair", repair);
	}
}
