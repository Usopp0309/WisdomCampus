package com.guotop.palmschool.system.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;
import com.guotop.palmschool.common.controller.BaseUploadController;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.service.StudentService;
import com.guotop.palmschool.service.UserService;
import com.guotop.palmschool.system.entity.CardApplyAudit;
import com.guotop.palmschool.system.service.CardApplyAuditService;
import com.guotop.palmschool.util.StringUtil;

/**
 * 在线审核申请控制类
 * 
 * @author jfy
 */
@RequestMapping("/cardApply")
@Controller
public class CardApplyAuditController extends BaseUploadController
{
	@Resource
	private CardApplyAuditService cardApplyAuditService;
	@Resource
	private UserService userService;
	
	@Resource
	private StudentService studentService;

	/**
	 * 进入在线审核申请页面
	 */
	@RequestMapping(value = "/toCardApplyAuditList.do")
	public String toCardApplyAuditList(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("utf-8");

		String condition = request.getParameter("condition");
		String status = request.getParameter("status");
		String lastId = request.getParameter("lastId");
		int lastIdInt = 0;
		if (status == null || status.equals(""))
		{
			status = "0";
		}
		if (lastId == null || lastId.equals(""))
		{
			lastIdInt = 0;
		} else
		{
			lastIdInt = Integer.valueOf(lastId);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("condition", condition);
		map.put("status", status);
		List<CardApplyAudit> list = new ArrayList<CardApplyAudit>();
		List<String> nameList = null;
		if (status.equals("0"))
		{
			list = cardApplyAuditService.getCardApplyAuditList(map);
			for (CardApplyAudit caa : list)
			{
				nameList = new ArrayList<String>();
				String memeber = caa.getMemberUserId();
				if(memeber != null && !memeber.equals(""))
				{
					String[] members = memeber.split(",");
					for (String memberId : members)
					{
						nameList.add(userService.getUserNameByUserId(Integer.valueOf(memberId)));
					}
					caa.setUserNames(nameList);
				}
			}
		} else if (status.equals("1"))
		{
			map.put("lastId", lastIdInt);
			list = cardApplyAuditService.getCardApplyPassList(map);
			for (CardApplyAudit caa : list)
			{
				nameList = new ArrayList<String>();
				String memeber = caa.getMemberUserId();
				if(memeber != null && !memeber.equals(""))
				{
					String[] members = memeber.split(",");
					for (String memberId : members)
					{
						nameList.add(userService.getUserNameByUserId(Integer.valueOf(memberId)));
					}
					caa.setUserNames(nameList);
				}
			}
			if (list.size() > 0)
			{
				modelMap.addAttribute("lastId", list.get(list.size() - 1).getId());
			}
		} else
		{
			map.put("lastId", lastIdInt);
			list = cardApplyAuditService.getCardApplyNotPassList(map);
			for (CardApplyAudit caa : list)
			{
				nameList = new ArrayList<String>();
				String memeber = caa.getMemberUserId();
				if(memeber != null && !memeber.equals(""))
				{
					String[] members = memeber.split(",");
					for (String memberId : members)
					{
						nameList.add(userService.getUserNameByUserId(Integer.valueOf(memberId)));
					}
					caa.setUserNames(nameList);
				}
			}
			if (list.size() > 0)
			{
				modelMap.addAttribute("lastId", list.get(list.size() - 1).getId());
			}
		}

		modelMap.addAttribute("condition", condition);
		modelMap.addAttribute("auditList", list);
		modelMap.addAttribute("status", status);
		modelMap.addAttribute("rowNum", list.size());
		return "system/fill_Card";
	}

	/**
	 * 修改状态
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/modifyStatus.do")
	public String modifyStatus(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		String status = request.getParameter("status");
		HashMap<String, Object> map = new HashMap<String, Object>();
		try
		{
			map.put("id", Integer.valueOf(id));
			map.put("status", status);
			cardApplyAuditService.modifyStatus(map);
			map.clear();
			map.put("status", 0);
		} catch (Exception ex)
		{
			map.put("status", 1);
		}
		try
		{
			Gson gson = new Gson();
			String json = gson.toJson(map);
			response.getWriter().write(json);
			response.getWriter().flush();

		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 加载更多
	 * @param request
	 * @param response
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/loadMore.do")
	public String loadMore(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("utf-8");
		String id = request.getParameter("lastId");
		String status = request.getParameter("status");
		String condition = request.getParameter("condition");
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("lastId", id);
		map.put("status", status);
		map.put("condition", condition);
		List<CardApplyAudit> list = cardApplyAuditService.loadMore(map);
		if (list.size() > 0)
		{
			map.put("lastId", list.get(list.size() - 1).getId());
		}else
		{
			map.put("lastId", id);
		}
		try
		{
			map.put("status", 0);
			Gson gson = new Gson();
			String json = gson.toJson(map);
			response.getWriter().write(json);
			response.getWriter().flush();
			
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 补办卡申请页面
	 * @return
	 */
	@RequestMapping(value="/toAddCardApply.do")
	public String toAddCardApply(){
		return "system/addCardApply";
	}
	/**
	 * 新增补办卡申请
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/doAddCardApply.do")
	public String doAddCardApply(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		User loginUser = (User) session.getAttribute("user");
		String schoolId = loginUser.getSchoolId();
		HashMap<String, Object> map = new HashMap<String, Object>();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
		SimpleDateFormat formatterTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		// 得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问，保证上传文件的安全
		String fileDirPath = "\\" + schoolId + "\\cardApply\\" + formatter.format(new Date()) + "\\";
		String savePath = getTempRoot() + fileDirPath;
		File file = new File(savePath);
		// 判断上传文件的保存目录是否存在
		if (!file.exists() && !file.isDirectory())
		{
			// 创建目录
			file.mkdirs();
		}
		try
		{
			// 使用Apache文件上传组件处理文件上传步骤：
			// 1、创建一个DiskFileItemFactory工厂
			DiskFileItemFactory factory = new DiskFileItemFactory();
			// 2、创建一个文件上传解析器
			ServletFileUpload upload = new ServletFileUpload(factory);
			// 解决上传文件名的中文乱码
			upload.setHeaderEncoding("UTF-8");
			// 3、判断提交上来的数据是否是上传表单的数据
			if (!ServletFileUpload.isMultipartContent(request))
			{
				// 按照传统方式获取数据
				map.put("status", 1);
				return null;
			}
			// 4、使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List<FileItem>集合，每一个FileItem对应一个Form表单的输入项
			List<FileItem> list = upload.parseRequest(request);
			String cardType = "";
			String sumNumber = "";
			String remark = "";
			String newCardPath = "";
			String memberUserId = "";
			for (FileItem item : list)
			{
				// 如果fileitem中封装的是普通输入项的数据
				if (item.isFormField())
				{
					String name = item.getFieldName();
					if ("cardType".equals(name))
					{
						cardType = item.getString("UTF-8");
					} else if ("sumNumber".equals(name))
					{
						sumNumber = item.getString("UTF-8");
					}else if ("remark".equals(name))
					{
						remark = item.getString("UTF-8");
					}else if ("memberUserId".equals(name))
					{
						memberUserId = item.getString("UTF-8");
					}
				} else
				{// 如果fileitem中封装的是上传文件
					// 得到上传的文件名称，
					String fieldName = item.getFieldName();
					String filename = item.getName();
					if (filename == null || filename.trim().equals(""))
					{
						continue;
					}
					// 注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，如：
					// c:\a\b\1.txt，而有些只是单纯的文件名，如：1.txt
					// 处理获取到的上传文件的文件名的路径部分，只保留文件名部分
					filename = filename.substring(filename.lastIndexOf("\\") + 1);
					// 获取item中的上传文件的输入流
					InputStream in = item.getInputStream();
					// 创建一个文件输出流
					FileOutputStream out = new FileOutputStream(savePath + "\\" + filename);
					// 创建一个缓冲区
					byte buffer[] = new byte[1024];
					// 判断输入流中的数据是否已经读完的标识
					int len = 0;
					// 循环将输入流读入到缓冲区当中，(len=in.read(buffer))>0就表示in里面还有数据
					while ((len = in.read(buffer)) > 0)
					{
						// 使用FileOutputStream输出流将缓冲区的数据写入到指定的目录(savePath + "\\"
						// + filename)当中
						out.write(buffer, 0, len);
					}
					// 关闭输入流
					in.close();
					// 关闭输出流
					out.close();
					if ("newCardPath".equals(fieldName))
					{
						newCardPath = "/upload/" + fileDirPath + filename;
					} 
				}
				
			}
			
			String[] applyUserIds = memberUserId.split(",");
			String applyUserId = "";
			for(int i=0;i<applyUserIds.length;i++)
			{
				if(applyUserIds[i].startsWith("C"))
				{
					List<User> studentList = studentService.getStudentListByClazzIdInStudentSMS(StringUtil.toint(applyUserIds[i].replace("C", "")));
					for(int j=0; j<studentList.size();j++)
					{
						if(i == applyUserIds.length && j==studentList.size()-1)
						{
							applyUserId += studentList.get(j).getUserId();
						}else
						{
							applyUserId += studentList.get(j).getUserId() + ",";
						}
					}
				}else
				{
					if(i == applyUserIds.length-1)
					{
						applyUserId += applyUserIds[i].replace("S", "");
					}else
					{
						applyUserId += applyUserIds[i].replace("S", "")+ ",";
					}
				}
			}
			CardApplyAudit caa = new CardApplyAudit();
			caa.setApplyUserId(loginUser.getUserId());
			caa.setApplyTime(formatterTime.format(new Date()));
			caa.setAttachPath(newCardPath);
			caa.setAuditstatus(0);
			caa.setCardtype(cardType);
			caa.setMemberUserId(applyUserId);
			caa.setPhone(loginUser.getPalmUserName());//申请人手机号
			caa.setRemark(remark);
			caa.setSchoolId(Long.valueOf(schoolId));
			caa.setSumNumber(sumNumber);
			cardApplyAuditService.addCardApply(caa);
			
			return "system/addCardApply";
		} catch (Exception e)
		{
			e.printStackTrace();

		}
		return null;
	}

	@Override
	public String getCommandName()
	{
		// TODO Auto-generated method stub
		return null;
	}
}
