package com.guotop.palmschool.shopping.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.guotop.palmschool.controller.BaseController;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.entity.UserAccount;
import com.guotop.palmschool.entity.UserAccountHistory;
import com.guotop.palmschool.listener.DBContextHolder;
import com.guotop.palmschool.listener.StartupListener;
import com.guotop.palmschool.rest.entity.PushItem;
import com.guotop.palmschool.service.UserAccountService;
import com.guotop.palmschool.service.UserService;
import com.guotop.palmschool.shopping.entity.Orders;
import com.guotop.palmschool.shopping.service.OrdersService;
import com.guotop.palmschool.util.StringUtil;
import com.guotop.palmschool.util.TimeUtil;

import dev.gson.GsonHelper;

/**
 *个人钱包控制类
 * 
 * @author jfy
 * @date 2016年3月23日
 */
@Controller
@RequestMapping("/wallet")
public class WalletController extends BaseController
{
	private Logger logger = LoggerFactory.getLogger(WalletController.class);
	@Resource
	private UserAccountService userAccountService;
	@Resource
	private OrdersService ordersService;
	
	@Resource
	private UserService userService;
	/**
	 * 跳转到个人钱包支付
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value="/toPersonalWallet.do")
	public String toPersonalWallet(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		User login = (User)session.getAttribute("user");
		
		String orderId = request.getParameter("WIDout_trade_no");
		String goodsName = request.getParameter("WIDsubject");
		String amount = request.getParameter("WIDtotal_fee");
		
		UserAccount ua = userAccountService.findUserAccountByUserId(login.getUserId());
		if (ua == null)
		{
			modelMap.addAttribute("balance","0.0");
		}else
		{
			modelMap.addAttribute("balance",ua.getBalance());
		}
		modelMap.addAttribute("orderId",orderId);
		modelMap.addAttribute("goodsName",goodsName);
		modelMap.addAttribute("amount",amount);
		
		return "shopping/personalWallet";
	}
	
	/**
	 * 付款
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value="/pay.do")
	public String doPay(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("utf-8");
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		User login = (User)session.getAttribute("user");
		String orderId = request.getParameter("orderId");
		String passWord = request.getParameter("passWord");
		String goodsName = request.getParameter("goodsName");
		String md5PassWord = StringUtil.toMD5(passWord);
		Integer userId = login.getUserId();
		float amountF = 0.0f;
		
		try
		{
			UserAccount ua = userAccountService.findUserAccountByUserId(userId);
			if (ua != null)
			{
				//根据订单号获取待支付额
				Orders order = ordersService.getOrdersById(Integer.valueOf(orderId));
				String amount = order.getAmount();
				if (amount != null)
				{
					amountF = Float.valueOf(amount);
				}
				String balance = ua.getBalance();
				if (balance != null)
				{
					float balanceF = Float.valueOf(balance);
					//余额小于待支付金额，则不允许支付
					if (amountF > balanceF)
					{
						resultMap.put("code", "-1");
						resultMap.put("msg", "余额不足，请充值后再次购买！");
						
					}else
					{
						//判断支付密码是否正确
						if (userAccountService.getUserAccountCountByUserIdAndPassWord(userId, md5PassWord) > 0)
						{
							float newBalance = balanceF-amountF;
							ua.setBalance(String.valueOf(newBalance));
							ua.setUpdateTime(TimeUtil.getInstance().now());
							UserAccountHistory userAccountHistory = new UserAccountHistory();
							userAccountHistory.setCreateTime(TimeUtil.getInstance().now());
							userAccountHistory.setDescription("购买" + goodsName);
							userAccountHistory.setOldBalance(String.valueOf(balanceF));
							userAccountHistory.setNewBalance(String.valueOf(newBalance));
							userAccountHistory.setUserId(ua.getUserId());
							userAccountHistory.setType(2);
							//更新个人账户
							userAccountService.updateUserAccount(ua);
							//记录账户变动记录
							userAccountService.addUserAccountHistory(userAccountHistory);
							//修改订单状态
							order.setStatus(1);
							order.setUpdateTime(TimeUtil.getInstance().now());
							order.setChannel(3);
							ordersService.updateOrders(order);
							
							List<PushItem> piList = new ArrayList<PushItem>();
							// 如果是虚拟物品 则查找对应的学校 然后通过商品名称和学校的短信套餐进行匹配
							// 如果相同则在该学校的短信套餐用户信息表里插入对应的用户信息
							if (order.getIsVirtual() == 1 || order.getIsVirtual() == 5)
							{
								List<User> userList = StartupListener.ordersService.getUserSchoolIdByUserId(order.getUserId());

								for(User user : userList)
								{
									// 根据设备查找数据源
									DBContextHolder.setDBType(user.getSchoolId());
									// 修改学校的短信套餐用户信息表的中的状态为可用状态
									StartupListener.ordersService.updateOrderMessageUserByOrederId(Integer.valueOf(orderId));

									PushItem pi = new PushItem();
									pi.receiverId = user.getUserId();
									pi.channels = user.getBaiduChannelId();
									pi.deviceType = String.valueOf(user.getDeviceType());
									pi.PushType = 17;
									pi.PushContentType = 4;
									pi.title = "付款成功";
									pi.schoolId = String.valueOf(user.getSchoolId());
									
									if(order.getIsVirtual() == 1)
									{
										pi.PushContent = "您已成功购买" + order.getGoodsName() + "支付：" + order.getAmount() + "元！";
									}
									else
									{
										pi.PushContent = "您已成功代充服务费："+ order.getAmount() + "元！";
										
										List<User> userDetailList = StartupListener.ordersService.getMessageUserDetailByOrderId(Integer.valueOf(orderId));
										for(User us : userDetailList)
										{
											PushItem pit = new PushItem();
											pit.receiverId = us.getUserId();
											pit.channels = us.getBaiduChannelId();
											pit.deviceType = String.valueOf(us.getDeviceType());
											pit.PushContent = "您好！"+user.getRealName()+"已成功为您代充服务费！";
											pit.PushType = 17;
											pit.PushContentType = 6;
											pit.title = "付款成功";
											pit.schoolId = String.valueOf(user.getSchoolId());
											piList.add(pit);
										}
									}
									piList.add(pi);
									StartupListener.commonService.pushMsg(piList, false);// 消息推送
									
								}
							}else if(order.getIsVirtual() == 6){//6购买学校单条套餐
								//查询出学校
								List<User> userList = StartupListener.ordersService.getUserSchoolIdByUserId(order.getUserId());
								for(User user : userList)
								{
									// 根据设备查找数据源
									DBContextHolder.setDBType(user.getSchoolId());
									// 修改学校的短信套餐学校信息表的中的状态为可用状态
									StartupListener.orderMessageService.updateOrderMessageSchoolByOrederId(Integer.valueOf(orderId));
									
									PushItem pi = new PushItem();
									pi.receiverId = user.getUserId();
									pi.channels = user.getBaiduChannelId();
									pi.deviceType = String.valueOf(user.getDeviceType());
									pi.PushType = 17;
									pi.PushContentType = 4;
									pi.title = "付款成功";
									pi.schoolId = String.valueOf(user.getSchoolId());
									pi.PushContent = "您已成功购买学校套餐" + order.getGoodsName() + "支付：" + order.getAmount() + "元！";
									piList.add(pi);
									StartupListener.commonService.pushMsg(piList, false);// 消息推送
								}
							}
							
							resultMap.put("code", "0");
							resultMap.put("msg", "支付成功！");
						}
//						else if (md5PassWord.equals(StringUtil.toMD5("123456")))
//						{
//							resultMap.put("code", "2");
//							resultMap.put("msg", "初始密码无法支付，请修改密码！");
//						}
						else 
						{
							resultMap.put("code", "1");
							resultMap.put("msg", "支付密码错误，请重新输入！");
						}
					}
				}
				
				response.getWriter().write(GsonHelper.toJson(resultMap));
				response.getWriter().flush();
			}
		}catch(Exception e)
		{
			logger.error(e.getMessage());
		}
		
		return null;
	}
}
