package com.guotop.palmschool.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import com.guotop.palmschool.common.entity.ResultInfo;
import com.guotop.palmschool.common.service.CommonService;
import com.guotop.palmschool.entity.Card;
import com.guotop.palmschool.entity.Department;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.entity.UserRole;
import com.guotop.palmschool.service.BaseService;
import com.guotop.palmschool.service.DepartmentService;
import com.guotop.palmschool.service.TeacherService;
import com.guotop.palmschool.service.UserDataChangeRecordsService;
import com.guotop.palmschool.util.Pages;
import com.guotop.palmschool.util.StringUtil;
import com.guotop.palmschool.util.TimeUtil;

/**
 * 教师业务类实现类
 */
@Service("teacherService")
public class TeacherServiceImpl extends BaseService implements TeacherService
{
	@Resource
	private CommonService commonService;
	
	@Resource
	private UserDataChangeRecordsService userDataChangeRecordsService;
	
	@Resource
	private DepartmentService departmentService;
	
	private String syncTarget = "2";//同步对象2：老师
	
	private String operationClass = "teacher";//操作对象

	@SuppressWarnings("unchecked")
	public Pages getTeacherByRole(int pageSize, int page, Map<String, Object> paramMap, User user)
	{
		List<User> list = new ArrayList<User>();
		
		boolean isAdmin = false;
		if(commonService.hasAdminPermission(user)){
			isAdmin = true;
		}
		if(!isAdmin){
			List<Department> departmentList = getBaseDao().selectListByObject("UserPermission.getDepartmentListByUserIdAndPermissionCode", paramMap);
			paramMap.put("departmentList", departmentList);
		}
		int allRow = this.getBaseDao().getAllRowCountByCondition("User.getTeacherList", paramMap);
		int totalPage = Pages.countTotalPage(pageSize, allRow);

		final int offset = Pages.countOffset(pageSize, page);
		final int length = pageSize;
		int currentPage = Pages.countCurrentPage(page);
		list = this.getBaseDao().queryForPageByCondition("User.getTeacherList", paramMap, offset, length);

		Pages pages = new Pages();
		pages.setPageSize(pageSize);
		/**
		 * 如果总页数为0，当前页也应该为0
		 */
		if (0 == totalPage)
		{
			currentPage = 0;
		}
		pages.setCurrentPage(currentPage);
		pages.setAllRow(allRow);
		pages.setTotalPage(totalPage);
		pages.setList(list);
		pages.init();
		return pages;
	}
	/**
	 * 根据年级ID查找到教师bean【福建专用】
	 * @param paramMap 参数map
	 * @return 查找到的教师bean
	 */
	@SuppressWarnings("unchecked")
	public Pages getTeacherByRoleFj(int pageSize, int page, Map<String, Object> paramMap){
	List<User> list = new ArrayList<User>();
	int allRow = this.getBaseDao().getAllRowCountByCondition("User.getTeacherListFj", paramMap);
	int totalPage = Pages.countTotalPage(pageSize, allRow);

	final int offset = Pages.countOffset(pageSize, page);
	final int length = pageSize;
	int currentPage = Pages.countCurrentPage(page);
	list = this.getBaseDao().queryForPageByCondition("User.getTeacherListFj", paramMap, offset, length);

	Pages pages = new Pages();
	pages.setPageSize(pageSize);
	/**
	 * 如果总页数为0，当前页也应该为0
	 */
	if (0 == totalPage)
	{
		currentPage = 0;
	}
	pages.setCurrentPage(currentPage);
	pages.setAllRow(allRow);
	pages.setTotalPage(totalPage);
	pages.setList(list);
	pages.init();
	return pages;
	}
	/**
	 * 添加教师（20151124）
	 * 
	 * @param 待添加的教师
	 * @param 参数列表
	 * @param cardCodeSet
	 *            卡号set
	 */
	@Transactional
	public void addTeacher(HashMap<String, Object> paramMap, User teacherBase, User teacherDetail, Set<String> cardCodeSet, String roleCode)
	{
		/*
		 * 添加userbase对应的信息 返回最后一条插入的用户ID
		 */
		Integer teacherId = getBaseDao().addObject("User.addUserBase", teacherBase);

		paramMap.put("userId", teacherId);

		/*
		 * 添加user_detail对应的信息
		 */
		// 同步openfire
		String voipAccount = commonService.registerOpenFire(teacherBase.getUuserId());
		teacherDetail.setUserId(teacherId);
		teacherDetail.setVoipAccount(voipAccount);
		getBaseDao().addObject("User.addUserDetail", teacherDetail);

		/*
		 * 添加user_school对应的信息
		 */

		getBaseDao().addObject("User.addUserSchool", paramMap);

		/*
		 * 添加user_role对应的信息
		 */
		commonService.addUserRole(paramMap);

		/*
		 * 添加user_department对应的信息
		 */
		departmentService.doAddTeacherToDepartment(paramMap);

		if (!CollectionUtils.isEmpty(cardCodeSet))
		{
			for (String cardCode : cardCodeSet)
			{
				if (!StringUtil.isEmpty(cardCode))
				{
					commonService.addUserAndCardLink(cardCode, teacherId);
				}
			}
		}
	}

	/**
	 * 添加教师1（20151216）
	 * 
	 * @param 待添加的教师
	 * @param 参数列表
	 * @param cardCodeSet
	 *            卡号set
	 */
	@Transactional
	public void addTeacher1(HashMap<String, Object> paramMap, Set<String> cardCodeSet, Integer userSchoolCount)
	{

		/*
		 * 更新user_detail对应的信息
		 */
		getBaseDao().updateObject("User.modifyUserDetailById", paramMap);

		if (userSchoolCount == 0)
		{
			/*
			 * 添加user_school对应的信息
			 */
			getBaseDao().addObject("User.addUserSchool", paramMap);

		}

		/*
		 * 添加user_role对应的信息
		 */
		commonService.addUserRole(paramMap);

		/*
		 * 添加user_department对应的信息
		 */
		departmentService.doAddTeacherToDepartment(paramMap);

		if (null != cardCodeSet)
		{
			Integer teacherId = (Integer) paramMap.get("userId");
			for (String cardCode : cardCodeSet)
			{
				if (!StringUtil.isEmpty(cardCode))
				{
					commonService.addUserAndCardLink(cardCode, teacherId);
				}
			}
		}

	}

	/**
	 * 根据年级ID查找到教师bean
	 * 
	 * @param paramMap
	 *            参数map
	 * @return 查找到的教师bean 20151127
	 */
	public User getTeacherById(Map<String, Object> paramMap)
	{
		return (User) getBaseDao().selectObjectByObject("User.getTeacherById", paramMap);
	}

	@Override
	public User getTeacherById(Integer id)
	{
		return (User) getBaseDao().selectObject("User.getTeacherByUserId", id);
	}
	/**
	 * 修改教师实体
	 * 
	 * @param paramMap
	 *            参数map
	 */
	public void modifyTeacherById(Map<String, Object> paramMap)
	{

		getBaseDao().updateObject("User.modifyUserBaseById", paramMap);

		getBaseDao().updateObject("User.modifyUserDetailById", paramMap);
	}

	/**
	 * 修改教师信息时查看卡号是否存在
	 * 
	 * @param map一个为原始卡号
	 *            一个为修改的卡号
	 * @return 返回值
	 */
	@SuppressWarnings("unchecked")
	public ResultInfo checkModifyTeacherCardCodeByCardCode(Map<String, Object> paramMap)
	{
		Integer reg = 0;

		List<Integer> result = getBaseDao().selectListByObject("Card.checkModifyTeacherCardCodeByCardCode", paramMap);

		if (null != result && result.size() > 0)
		{
			reg = 1;
		} else
		{
			reg = 0;
		}

		ResultInfo resultInfo = new ResultInfo();
		if (ResultInfo.RESULT_EXISTS.equals(reg))
		{
			resultInfo.setResultCode(ResultInfo.RESULT_SUCCESS);
		} else
		{
			resultInfo.setResultCode(ResultInfo.RESULT_ERROR);
		}
		return resultInfo;
	}

	/**
	 * 表单校验相关---end
	 */

	/**
	 * 根据老师的id查询卡号
	 * 
	 * @param teacherId
	 *            老师的id
	 * @return 卡号
	 */
	public Card selectCardCodeByTeacherId(Integer teacherId)
	{

		return (Card) getBaseDao().selectObjectByObject("Card.selectCardCodeByTeacherId", teacherId);

	}

	@SuppressWarnings("unchecked")
	@Override
	public void delTeacher(HashMap<String, Object> map)
	{
		Integer userId = (Integer) map.get("userId");
		// 判断是否有孩子在该学校，有则删除角色，无则删除学校关联及角色
		List<UserRole> roleList = getBaseDao().selectListByObject("UserRole.getUserRoleByUserId", userId);
		boolean hasChildren = false;
		List<String> roleCodeList = new ArrayList<String>();
		for (UserRole ur : roleList)
		{
			if (ur.getRoleCode().equals("parent"))
			{
				hasChildren = true;
			} else
			{
				roleCodeList.add(ur.getRoleCode());
			}
		}

		if (hasChildren)
		{
			for (String roleCode : roleCodeList)
			{
				map.put("roleCode", roleCode);
				// 删除教师角色
				getBaseDao().deleteObject("UserRole.deleteUserRoleByCondition", map);
				//删除教师角色对应的权限
				getBaseDao().deleteObject("UserPermission.deleteUserPermissionByCondition", map);
			}

		} else
		{
			// 删除学校关联
			getBaseDao().deleteObject("User.delUserAndSchoolLink", map);
			for (String roleCode : roleCodeList)
			{
				map.put("roleCode", roleCode);
				// 删除教师角色
				getBaseDao().deleteObject("UserRole.deleteUserRoleByCondition", map);
				//删除教师角色对应的权限
				getBaseDao().deleteObject("UserPermission.deleteUserPermissionByCondition", map);
			}
		}
		// 删除部门关联
		getBaseDao().deleteObject("UserDepartment.delUserAndDepartLink", map.get("userId"));
		//删除卡关系 和对应的卡号
		getBaseDao().deleteObject("Card.deleteUserCardByUserId", userId);
		//清空教师的工号code值
		getBaseDao().updateObject("User.deleteStudentCode", userId);
	}
	/**
	 * 初始化detail的参数
	 * @param user
	 * @param userDetail
	 * @return
	 */
	public Map<String, String> putDetailMap(User user,User userDetail)
	{
		Map<String, String> detailMap = new HashMap<String, String>();
		detailMap.put("userId", String.valueOf(user.getUserId()));
		detailMap.put("teacherNumber", userDetail.getCode());
		detailMap.put("cardNumber", userDetail.getCardCode());
		detailMap.put("name", userDetail.getRealName());
		detailMap.put("phoneNumber", user.getPhone());
		detailMap.put("userName", user.getPalmUserName());
		detailMap.put("createTime", TimeUtil.getInstance().now());
		detailMap.put("updateTime", userDetail.getUpdateTime());
		detailMap.put("status", "0");
		return detailMap;
	}
}
