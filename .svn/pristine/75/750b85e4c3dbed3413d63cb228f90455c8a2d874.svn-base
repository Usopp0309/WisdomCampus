package com.guotop.palmschool.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import com.guotop.palmschool.common.service.CommonService;
import com.guotop.palmschool.constant.Cons;
import com.guotop.palmschool.entity.Department;
import com.guotop.palmschool.entity.Permission;
import com.guotop.palmschool.entity.Role;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.entity.UserCard;
import com.guotop.palmschool.entity.UserPermission;
import com.guotop.palmschool.entity.UserRole;
import com.guotop.palmschool.listener.DBContextHolder;
import com.guotop.palmschool.rest.entity.UserAuthorization;
import com.guotop.palmschool.rest.entity.UserInfoDetail;
import com.guotop.palmschool.service.BaseService;
import com.guotop.palmschool.service.ClazzService;
import com.guotop.palmschool.service.DepartmentService;
import com.guotop.palmschool.service.GradeService;
import com.guotop.palmschool.service.PermissionService;
import com.guotop.palmschool.service.RoleService;
import com.guotop.palmschool.service.StudentService;
import com.guotop.palmschool.service.UserService;
import com.guotop.palmschool.util.StringUtil;

/**
 * 用户操作类实现类
 * 
 * @author zhou
 *
 */
@Service("userService")
public class UserServiceImpl extends BaseService implements UserService
{
	@Resource
	private PermissionService permissionService;
	@Resource
	private RoleService roleService;
	@Resource
	private DepartmentService departmentService;
	@Resource
	private CommonService commonService;
	@Resource
	private GradeService gradeService;
	@Resource
	private ClazzService clazzService;
	@Resource
	private StudentService studentService;

	/**
	 * 登陆获取用户,多用户对应单手机号
	 * 
	 * @param userName
	 *            用户名(即手机号)
	 * @param password
	 *            密码
	 * @return 登陆成功后的用户列表，可能对应单用户多权限
	 */
	@SuppressWarnings("unchecked")
	public List<User> doLogin(String userName, String password)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("userName", userName);
		paramMap.put("md5password", StringUtil.toMD5(password));

		return getBaseDao().selectListByObject("User.doLogin", paramMap);
	}

	/**
	 * 添加userbase For 福建资源云
	 * @param user
	 * @return
	 */
	public Integer addUserBaseForFJ(User user){
		Integer userId = getBaseDao().addObject("User.addUserBaseForFJ", user);
		return userId;
	}
	/**
	 * 添加userDetail For 福建资源云
	 * @param user
	 * @return
	 */
	public void addUserDetailForFJ(User user){
		getBaseDao().addObject("User.addUserDetailForFJ", user);
	}
	
	
	/**
	 * 根据uuserId查询用户
	 * @param uuserId
	 * @return
	 */
	public User getUserByUUserId(String uuserId)
	{
		return (User) getBaseDao().selectObjectByObject("User.getUserByUUserId", uuserId);
	}
	
	/**
	 * 根据用户code获取用户card信息
	 * 
	 * @param code
	 * @return UserCard 用户卡信息
	 */
	public UserCard selectUserCardByHomeId(String code)
	{
		return (UserCard) getBaseDao().selectObjectByObject("User.selectUserCardByHomeId", code);
	}

	/**
	 * 检查密码是否存在
	 * 
	 * @param oldPassword
	 *            待查询密码
	 * @param userList
	 *            存在session中的用户集合
	 * @return true:存在 false:不存在
	 */
	public boolean checkPasswordExist(String oldPassword, Integer userId)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("password", StringUtil.toMD5(oldPassword));
		paramMap.put("userId", userId);

		Integer count = (Integer) getBaseDao().selectObjectByObject("User.checkPasswordExist", paramMap);
		if (Cons.RESULT_QUERYEXIST.equals(count))
		{
			return true;
		} else
		{
			return false;
		}
	}

	/**
	 * 修改密码
	 * 
	 * @param oldPassword
	 * @param newPassword
	 * @param userList
	 *            return
	 */
	public Integer modifyPassword(String oldPassword, String newPassword, Integer userId)
	{
		Integer count = 0;
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("md5OldPassword", StringUtil.toMD5(oldPassword));
		paramMap.put("md5newPassword", StringUtil.toMD5(newPassword));
		paramMap.put("userId", userId);

		try
		{
			getBaseDao().updateObject("User.modifyPassword", paramMap);
			count = 1;
		} catch (Exception e)
		{
			count = -1;
		}
		return count;
	}
	/**
	 * 修改密码【福建专用】
	 * 
	 * @param oldPassword
	 * @param newPassword
	 * @param userList
	 *            return
	 */
	public Integer modifyPasswordFj(String oldPassword, String newPassword, Integer userId)
	{
		Integer count = 0;
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("md5OldPassword", StringUtil.toMD5(oldPassword));
		paramMap.put("md5newPassword", StringUtil.toMD5(newPassword));
		paramMap.put("userId", userId);
		
		try
		{
			getBaseDao().updateObject("User.modifyPasswordFj", paramMap);
			count = 1;
		} catch (Exception e)
		{
			count = -1;
		}
		return count;
	}

	/**
	 * @param userName
	 *            用户名
	 * @return List<User> 查找到的用户列表
	 */
	@SuppressWarnings("unchecked")
	public List<User> getUserListByBindPhone(String bindPhone)
	{
		return getBaseDao().selectListByObject("User.getUserListByBindPhone", bindPhone);
	}

	/**
	 * 根据userId查找到电子卡Id
	 * 
	 * @param code
	 *            电子卡code
	 * @return
	 */
	public UserCard selectCardIdByUserId(Integer userid)
	{
		return (UserCard) getBaseDao().selectObjectByObject("User.selectCardIdByUserId", userid);
	}

	/**
	 * 获取所有互信ID为空的用户
	 */
	@SuppressWarnings("unchecked")
	public List<User> getAllUsersWithHxIdIsNull()
	{
		return getBaseDao().selectListBySql("User.selectUserWithHxIdIsNull");
	}

	/**
	 * 根据id更新对应互信ID
	 */
	public void modifyHxIdById(String huxinId, Integer id)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("huxinId", huxinId);
		paramMap.put("id", id);
		getBaseDao().addObject("User.modifyUserHxId", paramMap);
	}

	/**
	 * 根据id获取互信id
	 */
	public String getHxIdById(Integer userId)
	{
		return (String) getBaseDao().selectObject("User.selectHxIdById", userId);
	}

	/**
	 * 根据互信ID查找该互信ID能看到的所有教师(app接口)
	 * 
	 * @param huxinId
	 *            互信ID
	 */
	@SuppressWarnings("unchecked")
	public List<User> selectTeacherListByRole(Map<String, Object> paramMap, User user)
	{
		List<User> list = new ArrayList<User>();

		/**
		 * 新增权限划分
		 */
		Integer roleId = 0;

		/**
		 * 学校超级管理员权限 和校长权限 看到内容是一样
		 */
		if (Cons.ROLE_ADMIN.equals(roleId) || Cons.ROLE_SCHOOLADMIN.equals(roleId) || Cons.ROLE_HEADMASTER.equals(roleId))
		{
			list = getBaseDao().selectListByObject("User.selectTeacherListAsSchool", paramMap);
		} else
		{
			paramMap.put("departmentId", user.getDepartmentId());
			paramMap.put("userId", user.getId());
			list = getBaseDao().selectListByObject("User.selectTeacherListAsDepartmentLeader", paramMap);
		}

		/**
		 * 部门主任
		 * 
		 */
		if (Cons.ROLE_GRADELEADER.equals(roleId))
		{
			paramMap.put("departmentId", user.getDepartmentId());
			paramMap.put("userId", user.getId());
			list = getBaseDao().selectListByObject("User.selectTeacherListAsDepartmentLeader", paramMap);

		}
		return list;
	}

	/**
	 * 生成学校管理员，同时写入学校关系表中
	 */
	public void addUser(User user)
	{
		Integer userId = addUserBase(user);
		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		User tempUser = new User();
		tempUser.setUserId(userId);
		tempUser.setCreateTime(user.getCreateTime());
		tempUser.setRealName("学校管理员");
		tempUser.setBirthday(null);
		tempUser.setAge(0);
		tempUser.setCity(null);
		tempUser.setProvince(null);
		tempUser.setSex(null);
		tempUser.setQQ(null);
		tempUser.setCreateUserId(1);
		tempUser.setCertificateId(null);
		addUserDetail(tempUser);// userdetail表
		paramMap.clear();
		paramMap.put("userId", userId);
		paramMap.put("schoolId", user.getSchoolId());
		paramMap.put("type", "0");
		getBaseDao().addObject("User.addUserSchool", paramMap);
	}

	/**
	 * 根据用户id获取班级ID jfy 2015-11-30
	 */
	public String getClazzIdByUserId(Integer userId)
	{
		return (String) getBaseDao().selectObject("User.getClazzIdByUserId", userId);
	}

	/**
	 * 根据apiKey查找用户
	 * 
	 * @param apiKey
	 * @return User apiKey对于的用户 update syj 20151210
	 */
	@SuppressWarnings("unchecked")
	public List<User> getUserByApiKey(String apiKey)
	{
		return getBaseDao().selectListByObject("User.selectUserByApiKey", apiKey);
	}

	public User getUserByApiKeyAndSchoolId(String apiKey, String schoolId)
	{
		// 这边是利用apikey 进行模拟登录
		User user = null;
		List<User> userList = getUserByApiKey1(apiKey);
		if (userList != null && userList.size() > 0)
		{
			for (User tmp : userList)
			{
				if (!StringUtil.isEmpty(schoolId) && schoolId.equals(tmp.getSchoolId()))
				{
					user = setRoleAndPermissionToUser(tmp);
					break;
				}
			}
		}
		return user;
	}

	@SuppressWarnings("unchecked")
	private List<User> getUserByApiKey1(String apiKey)
	{
		List<User> userList = getBaseDao().selectListByObject("User.selectUserByApiKey", apiKey);
		if (userList != null && userList.size() > 0)
		{
			// 只有当集合长度为1，并且schoolId为空的时候，说明该用户没有绑定学校，需要找绑定关系
			if (userList.size() == 1 && StringUtil.isEmpty(userList.get(0).getSchoolId()))
			{
				Integer relate_userId = getPalmUserIdbyUserId(userList.get(0).getUserId());
				if(relate_userId != null){
					return getUserByUserId(relate_userId);
				}
				return null;
			}
			return userList;
		}
		return null;
	}
	
	public Integer getPalmUserIdbyUserId(Integer userId)
	{
		return (Integer) getBaseDao().selectObject("User.getPalmUserbyUserId", userId);
	}
	
	public void delBindPalmUserbyUserId(Integer userId)
	{
		getBaseDao().deleteObject("User.delBindPalmUserbyUserId", userId);
	}
	
	@SuppressWarnings("unchecked")
	public List<User> getYIXINUserDetailListbyUserId(Integer userId)
	{
		return getBaseDao().selectListByObject("User.getYIXINUserDetailListbyUserId", userId);
	}
	
	@SuppressWarnings("unchecked")
	public List<User> getUserByUserId(Integer userId)
	{
		return getBaseDao().selectListByObject("User.selectUserByUserId", userId);
	}
	
	@SuppressWarnings("unchecked")
	public List<User> getUserByUserIdForFJ(Integer userId){
		return getBaseDao().selectListByObject("User.getUserByUserIdForFJ", userId);
	}

	/**
	 * 将roleCode permissionCode 设置到user中
	 * 
	 * @param userList
	 */
	public User setRoleAndPermissionToUser(User user)
	{
		User tempUser = user;
		Integer userId = tempUser.getUserId();
		if ("sysadmin".equals(tempUser.getUsername()))// 超级管理员
		{
			List<Role> roleList = new ArrayList<Role>();
			List<Permission> permissionList = new ArrayList<Permission>();
			Role role = new Role();
			role.setRoleCode("admin");
			role.setRoleName("管理员");
			roleList.add(role);
			tempUser.setRoleList(roleList);

			Permission permission = new Permission();
			permission.setPermissionCode("admin");
			permission.setPermissionName("管理员");
			permissionList.add(permission);
			tempUser.setPermissionList(permissionList);

		} else
		{
			DBContextHolder.setDBType(tempUser.getSchoolId());
			if ("0".equals(tempUser.getSchoolType()))// 学校管理员
			{
				List<Role> roleList = roleService.getRoleList(userId);
				List<Permission> permissionList = permissionService.getPermissionList(userId);
				if (CollectionUtils.isEmpty(permissionList))
				{
					UserPermission up = new UserPermission();
					up.setUserId(userId);
					up.setPermissionCode("admin");
					HashMap<String, Object> parmMap = new HashMap<String, Object>();
					parmMap.put("userId", userId);
					parmMap.put("permissionCode", "admin");
					parmMap.put("roleCode", "admin");
					commonService.addUserPermission(parmMap);
					permissionList = permissionService.getPermissionList(userId);
				}
				if (CollectionUtils.isEmpty(roleList))
				{
					UserRole ur = new UserRole();
					ur.setUserId(userId);
					ur.setRoleCode("admin");
					roleService.addUserRole(ur);
					roleList = roleService.getRoleList(userId);
				}
				tempUser.setRoleList(roleList);
				tempUser.setPermissionList(permissionList);
			} else
			{
				List<Role> roleList = roleService.getRoleList(userId);
				List<Permission> permissionList = permissionService.getPermissionList(userId);
				String clazzId = getClazzIdByUserId(userId);
				List<Department> departList = departmentService.getDepartListByUserId(userId);
				tempUser.setRoleList(roleList);
				tempUser.setPermissionList(permissionList);
				tempUser.setDepartmentList(departList);
				if (null != clazzId)
				{
					tempUser.setClazzId(Integer.valueOf(clazzId));
				}
			}
		}

		return tempUser;
	}

	/**
	 * 根据apiKey查找该apiKey能看到的所有学生(app接口)
	 * 
	 * update syj 20151211
	 */
	@SuppressWarnings("unchecked")
	public List<User> selectStudentListByRole(Map<String, Object> paramMap, User user)
	{
		List<User> list = new ArrayList<User>();
		String permissionCode = (String) paramMap.get("permissionCode");
		if (commonService.hasAdminPermission(user))
		{
			list = this.getBaseDao().selectListByObject("User.getStudentListInSms", paramMap);
		} else
		{
			List<Integer> clazzIds = commonService.getIdsByUserIdAndPermissionCode(user.getUserId(), permissionCode, 0);
			if(clazzIds !=null && clazzIds.size() > 0){
				paramMap.put("clazzIds", clazzIds);
				list = this.getBaseDao().selectListByObject("User.getStudentListByClazzIdsInSms", paramMap);		
			}
		}

		return list;
	}

	@Override
	public boolean isManagerBySchoolIdAndUserId(long schoolId, Integer userId)
	{
		HashMap<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		map.put("userId", userId);
		map.put("schoolId", schoolId);
		String type = (String) getBaseDao().selectObjectByObject("User.isManagerBySchoolIdAndUserId", map);
		if ("0".equals(type))
		{
			flag = true;
		}
		return flag;
	}
	
	@Override
	public boolean isManagerBySchoolIdAndUserIdForFJ(long schoolId, Integer userId)
	{
		HashMap<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		map.put("userId", userId);
		map.put("schoolId", schoolId);
		String type = (String) getBaseDao().selectObjectByObject("User.isManagerBySchoolIdAndUserIdForFJ", map);
		if ("0".equals(type))
		{
			flag = true;
		}
		return flag;
	}
	
	

	@Override
	public String getUserNameByUserId(Integer userId)
	{
		return (String) getBaseDao().selectObjectByObject("User.getUserNameByUserId", userId);
	}

	@SuppressWarnings("unchecked")
	public List<User> getUserIdListBySchoolId(Long schoolId)
	{
		return getBaseDao().selectListByObject("User.getUserIdBySchoolId", schoolId);
	}

	@Override
	public String getUuserIdByUserId(int userId)
	{
		return (String) getBaseDao().selectObjectByObject("User.getUuserIdByUserId", userId);
	}
	
	public User getClazzLeaderByClazzIdInRICHBOOK(Integer clazzId){
		return (User) getBaseDao().selectObject("User.getClazzLeaderByClazzIdInRICHBOOK",clazzId);
	}
	
	@Override
	public String getVoipAccountByUserId(Integer userId)
	{
		return (String) getBaseDao().selectObjectByObject("User.getVoipAccountByUserId", userId);
	}

	@Override
	public User getUserInfoByCardCode(String cardCode)
	{
		return (User)getBaseDao().selectObjectByObject("User.getUserInfoByCardCode", cardCode);
	}

	@Override
	public void addDownLoadNum()
	{
		getBaseDao().updateObject("User.addDownLoadNum", null);
		
	}
	
	@SuppressWarnings("unchecked")
	public List<String> getPhonesByUserId(Integer userId)
	{
		return (List<String>)getBaseDao().selectListByObject("User.getPhonesByUserId", userId);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<User> getUserNameAndCardCodeList()
	{
		return getBaseDao().selectList("User.getUserNameAndCardCode",null);
	}
	
	public Integer getIdByStudentIdAndParentId(Integer cardId,Integer loginId)
	{
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("cardId", cardId);
		map.put("loginId", loginId);
		return (Integer)getBaseDao().selectObjectByObject("User.getIdByStudentIdAndParentId",map);
	}
	
	/**
	 * 获取学校所有家长
	 */
	@SuppressWarnings("unchecked")
	public List<User> getAllParentList()
	{
		return getBaseDao().selectListBySql("User.getAllParentList");
	}
	
	/**
	 * 获取学校所有教职工
	 */
	@SuppressWarnings("unchecked")
	public List<User> getAllTeacher()
	{
		return getBaseDao().selectListBySql("User.getAllTeacher");
	}
	
	/**
	 * 根据班级Id获取对应的所有家长
	 */
	@SuppressWarnings("unchecked")
	public List<User> getAllParentListByClazz(Integer clazzId)
	{
		return getBaseDao().selectList("User.getAllParentListByClazz",clazzId);
	}

	/**
	 * 根据年级Id获取对应的所有家长
	 */
	@SuppressWarnings("unchecked")
	public List<User> getAllParentListByGradeId(Integer gradeId)
	{
		return getBaseDao().selectList("User.getAllParentListByGradeId",gradeId);
	}
	
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<User> getTypeByUserId(String userId) {
		return (List<User>)getBaseDao().selectListByObject("User.getTypeByUserId",userId);
	}
	
	public boolean isExistUserByPhoneAndUserId(HashMap<String,Object> param)
	{
		boolean flag = false;
		Integer count = (Integer)getBaseDao().selectObjectByObject("User.getCountByPhoneAndUserId", param);
		if (count > 0)
		{
			flag = true;
		}
		return flag;
	}
	
	/**
	 * 查询系统管理员的信息
	 * @return
	 */
	public User getSysAdmin()
	{
		return (User) getBaseDao().selectObject("User.getSysAdmin", null);
	}
	
	/**
	 * 更新userbase 中的palmUserName为手机号 和source为1智慧校园用户
	 */
	public void updateUserBase(HashMap<String, Object> paramMap)
	{
		getBaseDao().updateObject("User.updateUserBase", paramMap);
	}
	
	public void updateUserDetail(HashMap<String, Object> paramMap)
	{
		getBaseDao().updateObject("User.updateUserDetail", paramMap);
	}
	
	/**
	 * 根据apikey查询亦信用户信息
	 * @param apiKey
	 * @return
	 */
	public User getHuxinUserByApiKey(String apiKey)
	{
		return (User)getBaseDao().selectObjectByObject("User.getHuxinUserByApiKey", apiKey);
	}
	
	/**
	 * 根据phone获取user
	 * @param phone
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<User> getCASUserByPhone(String phone){
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("phone", phone);
		return getBaseDao().selectListByObject("User.getCASUserByPhone", paramMap);
	}
	
	/**
	 * 根据name获取user
	 * @param phone
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<User> getCASUserByName(String name){
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("name", name);
		return getBaseDao().selectListByObject("User.getCASUserByName", paramMap);
	}
	
	
	/**
	 * 根据personid获取福建资源云用户信息
	 * @param phone
	 * @return
	 */
	public UserInfoDetail getFJUserDetailByPersonid(String personid){
		return (UserInfoDetail) getBaseDao().selectObjectByObject("User.getFJUserDetailByPersonid", personid);
	}
	
	public User getUserDetailByUserIdInPersonCenter(Integer userId){
		return (User) getBaseDao().selectObjectByObject("User.getUserDetailByUserIdInPersonCenter", userId);
	}
	
	@Override
	public UserAuthorization getUserAuthorizationByUserId(String userId)
	{
		UserAuthorization ua = (UserAuthorization) getBaseDao().selectObjectByObject("User.getUserAuthorizationByUserId", userId);
		return ua;
	}
	
	@Override
	public UserAuthorization getUserAuthorizationByPersonidForFJ(String personid)
	{
		UserAuthorization ua = (UserAuthorization) getBaseDao().selectObjectByObject("User.getUserAuthorizationByPersonidForFJ", personid);
		return ua;
	}
	
	@Override
	public void addUserAuthForFJ(UserAuthorization ua)
	{
		UserAuthorization  student_db = getUserAuthorizationByPersonidForFJ(ua.getPersonid());
		if(null == student_db){
			getBaseDao().addObject("User.addUserAuthorizationForFJ", ua);
		}
	}

	@Override
	public void updateUserAuthForFJ(UserAuthorization ua)
	{
		getBaseDao().updateObject("User.updateUserAuthorizationForFJ", ua);
	}
	/**
	 * 获得一键购买短信的家长
	  @author chenyong
	  @date 2016年11月2日 下午3:53:20
	 * @param schoolId
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<User> getAutoBySmsUser(Map<String,String> map)
	{
		return getBaseDao().selectListByObject("User.getAutoBySmsUser", map);
	}
	
	/**
	 * 获取所有未购买服务费的学生家长
	 * @param schoolId
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public ArrayList<User> getNotPurchaseParentList(String schoolId)
	{
		Map<String,Object> parmMap = new HashMap<String, Object>();
		parmMap.put("schoolId", schoolId);
		return (ArrayList<User>) getBaseDao().selectListByObject("User.getNotPurchaseParentList", parmMap);
	}
	
	/**
	 * 根据部门IdList获取对应的教师
	 * @param departmentIdList
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<User> getTeacherListByDepartmentIdList(List<Integer> departmentIdList)
	{
		return (List<User>) getBaseDao().selectListByObject("User.getTeacherListByDepartmentIdList", departmentIdList);
	}
	
	
	//---------------------------------以下智慧校园3.0---------------------------------------------------
	
	@Override
	public boolean checkCodeIsExistInAddNewUser(String code, Long schoolId)
	{
		Map<String,Object> paramMap = new HashMap<String, Object>();
		paramMap.put("code", code);
		paramMap.put("schoolId", schoolId);
		Integer result = (Integer) getBaseDao().selectObjectByObject("User.checkCodeIsExistInAddNewUser", paramMap);
		boolean flag = false;
		if (result > 0)
		{
			flag = true;
		}
		return flag;
	}

	@Override
	public boolean checkCodeIsExistInModifyUser(String origCode, String code, Long schoolId)
	{
		Map<String,Object> paramMap = new HashMap<String, Object>();
		paramMap.put("origCode", origCode);
		paramMap.put("code", code);
		paramMap.put("schoolId", schoolId);
		Integer result = (Integer) getBaseDao().selectObjectByObject("User.checkCodeIsExistInModifyUser", paramMap);
		boolean flag = false;
		if (result > 0)
		{
			flag = true;
		}
		return flag;
	}

	@Override
	public boolean checkBindPhoneIsExist(String bindPhone)
	{
		Map<String,Object> paramMap = new HashMap<String, Object>();
		paramMap.put("bindPhone", bindPhone);
		Integer result = (Integer) getBaseDao().selectObjectByObject("User.checkBindPhoneIsExist", paramMap);
		boolean flag = false;
		if (result > 0)
		{
			flag = true;
		}
		return flag;
	}

	@Override
	public boolean checkBindPhoneIsExistInModifyUser(String origBindPhone, String bindPhone)
	{
		Map<String,Object> paramMap = new HashMap<String, Object>();
		paramMap.put("origBindPhone", origBindPhone);
		paramMap.put("bindPhone", bindPhone);
		Integer result = (Integer) getBaseDao().selectObjectByObject("User.checkBindPhoneIsExistInModifyUser", paramMap);
		boolean flag = false;
		if (result > 0)
		{
			flag = true;
		}
		return flag;
	}
	
	@Override
	public Map<String, Object> getUserMapByBindPhone(String bindPhone,Long schoolId)
	{
		/*
		 * 处理逻辑如下
		 * 1.先根据bindPhone获取用户基本信息,判断是否是智慧校园用户
		 *   1.1  智慧校园用户
		 *   	1.1.1  根据userId获取用户的角色信息
		 *   	1.1.2 根据角色获取用户在学校的信息
		 *   1.2 亦信用户
		 *   	1.2.1 获取亦信的基本信息
		 */
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		User user = getUserByBindPhone(bindPhone);
		if(user == null){
			resultMap.put("flag", false);
			return resultMap;
		}
		resultMap.put("flag", true);
		Integer userId = user.getUserId();
		String newSchoolId = ""; 
		List<User> schoolIdList = getUserSchoolByUserId(userId);
		if("1".equals(user.getSource()) && (!CollectionUtils.isEmpty(schoolIdList))){
			//智慧校园用户
			StringBuffer msgBuffer = new StringBuffer();
			String schoolName = "";
			msgBuffer.append("该号码已经被");
			boolean isLocalSchool = false;
			for(User newUser : schoolIdList)
			{
				newSchoolId = newUser.getSchoolId();
				schoolName = newUser.getSchoolName();
				if((schoolId+"").equals(newSchoolId))
				{
					isLocalSchool = true;
					break;
				}
			}
			if(!isLocalSchool){
				DBContextHolder.setDBType(newSchoolId);
				msgBuffer.append(schoolName+"的");
			}
			List<UserRole> userRoleList = commonService.getUserRoleByUserId(userId);
			for(int j=0;j<userRoleList.size();j++)
			{
				UserRole ur = userRoleList.get(j);
				if("parent".equals(ur.getRoleCode()))
				{
					List<User> studentList=studentService.getStudentListByParentId(userId);//根据家长获得小孩
					if(!CollectionUtils.isEmpty(studentList))
					{
						for(int i=0;i<studentList.size();i++)
						{
							User student = studentList.get(i);
							if((i+1) == studentList.size()){
								msgBuffer.append(student.getClazzName()+":"+student.getRealName()+"的");
							}else {
								msgBuffer.append(student.getClazzName()+":"+student.getRealName()+",");
							}
						}
					}
					msgBuffer.append("'家长'");
				}else if("student".equals(ur.getRoleCode()))
				{
					msgBuffer.append("'学生'");
				}else
				{
					msgBuffer.append("'"+getRoleNameByRoleCode(ur.getRoleCode())+"',");
				}
			}
			msgBuffer.append("【"+user.getRealName()+"】使用");
			resultMap.put("msg", msgBuffer.toString());
		}else{
			//亦信用户
			resultMap.put("msg", "该号码已经被亦信用户【"+user.getNickName()+"】使用");
		}
		resultMap.put("user", user);
		//切换到原始的数据源
		DBContextHolder.setDBType(schoolId+"");
		return resultMap;
	}
	
	@Override
	public User getUserByBindPhone(String bindPhone){
		return (User) this.getBaseDao().selectObjectByObject("User.getUserByBindPhone", bindPhone);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<User> getUserSchoolByUserId(Integer userId)
	{
		List<User> list = this.getBaseDao().selectListByObject("User.getUserSchoolByUserId", userId);
		return list;
	}
	
	/**
	 * 根据roleCode获取角色名称
	 * @param roleCode
	 * @return
	 */
	private String getRoleNameByRoleCode(String roleCode){
		String roleName ="";
		if("admin".equals(roleCode)){
			roleName = "学校管理员";
		}else if("chairman".equals(roleCode)){
			roleName = "董事长";
		}else if("classLeader".equals(roleCode)){
			roleName = "班主任";
		}else if("departManager".equals(roleCode)){
			roleName = "部门管理员";
		}else if("employee".equals(roleCode)){
			roleName = "职工";
		}else if("other".equals(roleCode)){
			roleName = "其它";
		}else if("parent".equals(roleCode)){
			roleName = "家长";
		}else if("president".equals(roleCode)){
			roleName = "校长";
		}else if("student".equals(roleCode)){
			roleName = "学生";
		}else if("teacher".equals(roleCode)){
			roleName = "教师";
		}
		return roleName;
	}
	
	@Override
	public Integer addUserBase(User userBase){
		Integer userId = getBaseDao().addObject("User.addUserBase", userBase);
		return userId;
	}
	
	@Override
	public void addUserDetail(User userDetail){
		getBaseDao().addObject("User.addUserDetail", userDetail);
	}
	
	@Override
	public void addUserAndSchoolLink(Integer userId, Long schoolId)
	{
		if(!isExistsInSchool(userId, schoolId)){
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("userId", userId);
			map.put("schoolId", schoolId);
			map.put("type", 1);
			getBaseDao().addObject("User.addUserSchool", map);
		}
	}
	
	@Override
	public boolean isExistsInSchool(Integer userId, Long schoolId)
	{
		boolean flag = false;
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("userId", userId);
		map.put("schoolId", schoolId);
		Integer count = (Integer) getBaseDao().selectObjectByObject("User.getCountByUserIdAndSchoolId", map);
		if (count > 0)
		{
			flag = true;
		}
		return flag;

	}
	
	@Override
	public void yixinToWisdom(Integer userId,String realName,String code,String roleCode,Integer studentId,Integer departmentId,Integer clazzId,Set<String> cardCodeSet,Long schoolId)
	{
		/*
		 * 处理逻辑
		 * 普通亦信用户转为智慧校园用户
		 * 1.添加和学校的关系
		 * 2.添加在学校的角色和权限
		 * 3.如果是教师,添加和部门的关系;如果是家长,添加和小孩的关系,如果是小孩添加和班级的关系
		 * 4.添加和卡号的关系
		 * 5.更新userbase（更新source）和 user_detail（更新code和realName）
		 */
		//步骤1
		addUserAndSchoolLink(userId, schoolId);// user_school表
		//步骤2
		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("roleCode", roleCode);
		paramMap.put("userId", userId);
		commonService.addUserRole(paramMap);
		//步骤3
		if("parent".equals(roleCode)){
			studentService.addStudentAndParentLink(studentId,userId);
		}else if("student".equals(roleCode)){
			studentService.addUserAndClazzLink(userId,clazzId);
		}else{
			paramMap.put("departmentId", departmentId);
			departmentService.doAddTeacherToDepartment(paramMap);
		}
		//步骤4
		if (!CollectionUtils.isEmpty(cardCodeSet))
		{
			for (String cardCode : cardCodeSet)
			{
				if (!StringUtil.isEmpty(cardCode))
				{
					commonService.addUserAndCardLink(cardCode, userId);
				}
			}
		}
		//步骤5
		paramMap.put("source", "1");
		updateUserBase(paramMap);
		paramMap.put("realName", realName);
		paramMap.put("code", code);
		updateUserDetail(paramMap);
	}
	

	@Override
	public void wisdomToYinxin(User user,String roleCode,Long schoolId)
	{
		/*
		 * 处理逻辑
		 * 智慧校园用户转为亦信用户
		 * 1.删除和卡号的关系
		 * 2.如果是教职工删除在学校的部门关系，如果是家长，删除和小孩的关系
		 * 3.删除在学校的角色和权限
		 * 4.删除用户和学校的关系
		 * 5.更新userbase和 user_detail
		 */
		//步骤1
		
	}
}
