package com.guotop.palmschool.bluetooth.scheduler;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.Trigger;
import org.springframework.scheduling.TriggerContext;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.SchedulingConfigurer;
import org.springframework.scheduling.config.ScheduledTaskRegistrar;
import org.springframework.scheduling.support.CronTrigger;
import org.springframework.stereotype.Component;

import com.guotop.palmschool.bluetooth.entity.BluetoothBracelet;
import com.guotop.palmschool.bluetooth.entity.BluetoothData;
import com.guotop.palmschool.bluetooth.entity.BluetoothRouter;
import com.guotop.palmschool.bluetooth.entity.BluetoothStudent;
import com.guotop.palmschool.bluetooth.service.BluetoothDataService;
import com.guotop.palmschool.bluetooth.service.BluetoothStudentService;
import com.guotop.palmschool.bluetooth.service.BraceletService;
import com.guotop.palmschool.listener.DBContextHolder;
import com.guotop.palmschool.util.BlueToothUtil;
import com.guotop.palmschool.util.CollectionUtil;
import com.guotop.palmschool.util.PropertiesUtil;

@Component
@EnableScheduling
public class BluetoothScheduler implements SchedulingConfigurer {
	private Logger logger = LoggerFactory.getLogger(BluetoothScheduler.class);

	/**
	 * 蓝牙手环数据
	 */
	@Autowired
	private BluetoothDataService bluetoothDataService;
	@Autowired
	private BluetoothStudentService bluetoothStudentService;

	@Autowired
	private BraceletService braceletService;

	private static String cron;
	static {
		try {
			// 初始化定时时间
			Properties pro = PropertiesUtil.getInstance().read("webInfo.properties");
			cron = pro.getProperty("bluetoothSchedulerCron");
		} catch (Exception e) {
			cron="0 0 23 * * ?";
		}
		
	}

	/**
	 * 定时获取蓝牙数据
	 * 
	 * @author chenyong
	 * @Time 2017年4月26日 下午3:27:47
	 */
	private static void DataJob(BraceletService braceletService_, BluetoothStudentService bluetoothStudentService_,
			BluetoothDataService bluetoothDataService_, Logger logger_) {
		List<String> schoolIds = braceletService_.getSchoolIds();
		if (schoolIds == null || schoolIds.size() == 0) {
			// 没有学校使用蓝牙手环
			logger_.info("没有学校使用蓝牙手环");
			return;
		}
		Map<String,Object> map=new HashMap<>();
		map.put("status", 0);
		for (String schoolId : schoolIds) {
			// 切换数据源之前先添加到备份表中
			DBContextHolder.setDBType(schoolId);
			List<BluetoothRouter> listRouters = braceletService_.getAllBluetoothRouter(map);// 获得正常的路由器
			if (listRouters != null && listRouters.size() > 0) {
				for (BluetoothRouter br : listRouters) {
					String token = BlueToothUtil.getAccessToken(true);
					List<String> list = BlueToothUtil.getConnectDevices(true, token, br.getMac());
					if (!CollectionUtil.isEmpty(list)) {
						for (String macAddress : list) {
							BlueToothUtil.disConnect(true, token, br.getMac(), macAddress);
						}
					}
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					List<String> macList = new ArrayList<String>();
					List<BluetoothBracelet> lists = braceletService_.getByStatus(2);
					if (lists != null && lists.size() > 0) {
						for (BluetoothBracelet bbt : lists) {
							macList.add(bbt.getMac());
						}
					} else {
						logger_.info("定时获取蓝牙数据：没有可用的蓝牙手环");
						return;
					}
					/*
					 * macList.add("F2:EA:B5:FA:2B:3A");
					 * macList.add("F3:71:47:90:56:1D");
					 * macList.add("CD:8E:60:C4:80:79"); CC:1B:E0:E0:23:20
					 */
					Map<String, BluetoothData> dataMap = BlueToothUtil.doScan(true, br.getMac(), macList, token);
					if (dataMap != null && !dataMap.isEmpty()) {
						// 获得使用的手环信息
						// /状态(0:未使用，1：停用，2：使用中，3：未归还)
						List<BluetoothStudent> list_ = bluetoothStudentService_.getBluetoothStudentByStatus(2);
						List<BluetoothData> listData = new ArrayList<>();
						BluetoothData bd = null;
						BluetoothData newBd = null;
						if (list_ != null && list_.size() > 0) {
							for (BluetoothStudent bs : list_) {
								if (dataMap.containsKey(bs.getMac())) {
									newBd = new BluetoothData();
									bd = dataMap.get(bs.getMac());
									newBd.setBluetoothBraceletId(bs.getBluetoothBraceletId());
									newBd.setBraceletMac(bs.getMac());
									newBd.setCalorie(bd.getCalorie());
									newBd.setClazzId(bs.getClazzId());
									newBd.setClazzName(bs.getClazzName());
									newBd.setDataTime(bd.getDataTime());
									newBd.setEndTime(bs.getEndTime());
									newBd.setStartTime(bs.getStartTime());
									newBd.setHeartRate(bd.getHeartRate());
									newBd.setIp(bd.getIp());// 路由器Ip
									newBd.setMac(bd.getMac());// 路由器Mac
									newBd.setSteps(bd.getSteps());
									newBd.setUserId(bs.getUserId());
									newBd.setRealName(bs.getStudentName());
									listData.add(newBd);
								}
							}
						}
						if (listData != null && listData.size() > 0) {
							try {
								// 数据入库
								bluetoothDataService_.insertBathBluetoothData(listData);
							} catch (Exception e2) {
								logger_.error("定时获取蓝牙数据失败:" + e2.getMessage());
							}

						}
					}
				}
			} else {
				logger_.info("没有可用的路由器");
			}
		}
	}

	@Override
	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
		taskRegistrar.addTriggerTask(new Runnable() {
			@Override
			public void run() {
				BluetoothScheduler.DataJob(braceletService, bluetoothStudentService, bluetoothDataService, logger);
			}
		}, new Trigger() {
			@Override
			public Date nextExecutionTime(TriggerContext triggerContext) {
				CronTrigger trigger = new CronTrigger(cron);
				Date nextExec = trigger.nextExecutionTime(triggerContext);
				return nextExec;
			}
		});
	}

}
