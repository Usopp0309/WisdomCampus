package com.guotop.palmschool.patrol.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;
import com.guotop.palmschool.common.service.CommonService;
import com.guotop.palmschool.controller.BaseController;
import com.guotop.palmschool.entity.Department;
import com.guotop.palmschool.entity.Permission;
import com.guotop.palmschool.entity.Place;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.listener.DBContextHolder;
import com.guotop.palmschool.patrol.entity.Patrol;
import com.guotop.palmschool.patrol.entity.PatrolInout;
import com.guotop.palmschool.patrol.service.PatrolService;
import com.guotop.palmschool.service.DepartmentService;
import com.guotop.palmschool.service.PlaceService;
import com.guotop.palmschool.service.UserService;
import com.guotop.palmschool.util.Pages;
import com.guotop.palmschool.util.StringUtil;
import com.guotop.palmschool.util.TimeUtil;

/**
 * 校务巡查巡更记录控制类
 * 
 * @author syj
 */
@RequestMapping("/patrol")
@Controller
public class PatrolController extends BaseController
{
	private Logger logger = LoggerFactory.getLogger(PatrolController.class);

	@Resource
	private PatrolService patrolService;

	@Resource
	private CommonService commonService;

	@Resource
	private PlaceService placeService;

	@Resource
	private UserService userService;
	
	@Resource
	private DepartmentService departmentService;

	/**
	 * 进入巡更记录页面
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/toPatrolList.do")
	public String toPatrolList(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		return "patrol/list";
	}

	@RequestMapping(value = "/getPatrolList.do")
	public void getPatrolList(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{

		response.setCharacterEncoding("UTF-8");
		Map<String, Object> paramMap = new HashMap<String, Object>();
		try
		{
			User loginUser = (User) session.getAttribute("user");
			// 分页信息
			Integer currentPage = 1;
			try
			{
				currentPage = Integer.valueOf(request.getParameter("cPage"));
			} catch (Exception e)
			{
				currentPage = 1;
			}

			String createDate = request.getParameter("createDate");
			if (!StringUtil.isEmpty(createDate))
			{
				paramMap.put("createDate", createDate);
			}
			String queryContent = request.getParameter("queryContent");
			if (!StringUtil.isEmpty(queryContent))
			{
				paramMap.put("queryContent", queryContent);
			}
			this.getPages().setPageSize(20);
			Pages<Patrol> pages = patrolService.getPatrolListByCreateDateAndRealName(this.getPages().getPageSize(), currentPage, createDate, queryContent);

			List<Patrol> list = pages.getList();
			if(!CollectionUtils.isEmpty(list)){
				for(Patrol patrol : list){
					List<PatrolInout> inoutList = patrolService.getInoutList(createDate, patrol.getUserId(), patrol.getPlaceId());
					patrol.setInoutList(inoutList);
				}
			}
			Gson gson = new Gson();
			String json = gson.toJson(pages);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			logger.error("加载校务巡查巡更list出错，错误信息如下：" + e);
		}
	}

	/**
	 * 添加巡更页面
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/toPatrolAdd.do")
	public String toPatrolAdd(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		return "patrol/add";
	}

	/**
	 * 执行保存校务巡查巡更设置
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/doAddPatrol.do")
	public String doAddPatrol(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			Gson gson = new Gson();
			boolean flag = false;
			String departmentId = request.getParameter("departmentId");
			String userId = request.getParameter("userId");
			String placeId = request.getParameter("placeId");
			String startDate = request.getParameter("startDate");
			String endDate = request.getParameter("endDate");
			String startTime = request.getParameter("startTime");
			String endTime = request.getParameter("endTime");

			if (StringUtil.isEmpty(departmentId) || StringUtil.isEmpty(userId) || StringUtil.isEmpty(placeId))
			{
				String json = gson.toJson(flag);
				response.getWriter().write(json);
				response.getWriter().flush();
				return null;
			}

			if (StringUtil.isEmpty(startDate) || StringUtil.isEmpty(endDate) || StringUtil.isEmpty(startTime) || StringUtil.isEmpty(endTime))
			{
				String json = gson.toJson(flag);
				response.getWriter().write(json);
				response.getWriter().flush();
				return null;
			}

			SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy-MM-dd");
			Long intervalTime = formatter2.parse(endDate).getTime() - formatter2.parse(startDate).getTime();
			int cycleTimes = 1;// 得出需要循环次数
			if (intervalTime == 0l)
			{
				cycleTimes = 1;
			} else if (intervalTime > 0l)
			{
				cycleTimes = ((int) (intervalTime / (24 * 60 * 60 * 1000))) + 1;
			}
			// 查询巡查人员信息
			User user = commonService.getUserDetailByUserId(Integer.valueOf(userId));
			Department department = departmentService.getDepartmentById(Integer.valueOf(departmentId));
			List<Patrol> patrolList = new ArrayList<Patrol>();
			String startDateTMP = startDate; 
			for (int i = 0; i < cycleTimes; i++)
			{
				Patrol patrol = new Patrol();
				patrol.setUserId(Integer.valueOf(userId));
				patrol.setCode(user.getCode());
				patrol.setRealName(user.getRealName());
				patrol.setPhone(user.getPhone());
				patrol.setDepartmentId(Integer.valueOf(departmentId));
				patrol.setDepartmentName(department.getDepartmentName());
				patrol.setStartDate(startDateTMP);
				patrol.setStartTime(startDateTMP + " "+startTime);
				patrol.setEndDate(startDateTMP);
				patrol.setEndTime(startDateTMP+" "+endTime);
				patrol.setPlaceId(Integer.valueOf(placeId));
				patrolList.add(patrol);
				startDateTMP = TimeUtil.getInstance().getNextDay(startDateTMP);
			}
			if(!CollectionUtils.isEmpty(patrolList)){
				patrolService.batchAddPatrol(patrolList);	
			}
			flag = true;
			String json = gson.toJson(flag);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			logger.error("批量添加校务巡查巡更出错，错误信息如下：" + e);
		}
		return null;
	}

	/**
	 * 根据部门Id加载部门下教师列表
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 */
	@RequestMapping(value = "/loadTeacherListByDepartmentId.do")
	public void loadTeacherListByDepartmentId(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("UTF-8");
		String departmentId = request.getParameter("departmentId");
		List<User> teacherList = new ArrayList<User>();
		if (!StringUtil.isEmpty(departmentId))
		{
			teacherList = commonService.getTeacherDetailByDepartmentId(Integer.valueOf(departmentId));
		}
		try
		{
			Gson gson = new Gson();
			String json = gson.toJson(teacherList);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			logger.error("加载校务巡查巡更list出错，错误信息如下：" + e);
		}

	}

	/**
	 * 获取地点列表
	 */
	@RequestMapping(value = "/getPlaceList.do")
	public String getPlaceList(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			List<Place> placeList = placeService.getPlaceList();
			Gson gson = new Gson();
			String json = gson.toJson(placeList);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 修改巡更页面
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/toPatrolEdit.do")
	public String toPatroledit(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("UTF-8");
		String id = request.getParameter("id");
		Patrol patrol = patrolService.getPatrolById(Integer.valueOf(id));
		modelMap.addAttribute("patrol", patrol);
		
		return "patrol/edit";
	}

	/**
	 * 执行保存校务巡查巡更设置
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/doUpdatePatrol.do")
	public String doUpdatePatrol(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			Gson gson = new Gson();
			boolean flag = false;
			String departmentId = request.getParameter("departmentId");
			String userId = request.getParameter("userId");
			String placeId = request.getParameter("placeId");
			String patrolId = request.getParameter("patrolId");;

			if (StringUtil.isEmpty(departmentId) || StringUtil.isEmpty(userId) || StringUtil.isEmpty(placeId))
			{
				String json = gson.toJson(flag);
				response.getWriter().write(json);
				response.getWriter().flush();
				return null;
			}
			
			Patrol patrol = patrolService.getPatrolById(Integer.valueOf(patrolId));
			User user = commonService.getUserDetailByUserId(Integer.valueOf(userId));
			Department department = departmentService.getDepartmentById(Integer.valueOf(departmentId));
			patrol.setDepartmentId(Integer.valueOf(departmentId));
			patrol.setDepartmentName(department.getDepartmentName());
			patrol.setCode(user.getCode());
			patrol.setRealName(user.getRealName());
			patrol.setPhone(user.getPhone());
			patrol.setPlaceId(Integer.valueOf(placeId));
			patrol.setUserId(Integer.valueOf(userId));
			patrolService.updatePatrol(patrol);

			flag = true;
			String json = gson.toJson(flag);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			logger.error("批量添加校务巡查巡更出错，错误信息如下：" + e);
		}
		return null;
	}
	
	
	/**
	 * 根据部门Id加载部门下教师列表
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 */
	@RequestMapping(value = "/clearPatrol.do")
	public void clearPatrol(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			patrolService.clearPatrol(TimeUtil.date());
			
			Gson gson = new Gson();
			String json = gson.toJson(true);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			logger.error("清空校务巡查巡更设置出错，错误信息如下：" + e);
		}

	}
	
	/*---------手机端开始---------*/
	/**
	 * 进入教师考勤页面（APP）
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/toPatrolListByApiKey.do")
	public String toPatrolListByApiKey(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		modelMap.addAttribute("apiKey", apiKey);
		modelMap.addAttribute("schoolId", schoolId);
		User user = userService.getUserByApiKeyAndSchoolId(apiKey, schoolId);
		if (user == null)
		{
			user = (User) session.getAttribute("user");
			if (user != null)
			{
				modelMap.addAttribute("apiKeyTimeOut", "2");
			} else
			{
				modelMap.addAttribute("apiKeyTimeOut", "1");
				return  "app/patrol/patrol_list_app";
			}
		}else
		{
			modelMap.addAttribute("apiKeyTimeOut", "2");
		}
		

		session.setAttribute("user", user);
		DBContextHolder.setDBType(user.getSchoolId());
		String path = null;
		try{
			List<Permission> permissionList = user.getPermissionList();
			for (Permission permission : permissionList)
			{
				if ("patrol".equals(permission.getPermissionCode()) || "admin".equals(permission.getPermissionCode()))
				{
					path = "app/patrol/patrol_list_app";
					break;
				}
			}
			/*
			 * 接收页面请求参数---begin
			 */
			Integer userId = user.getUserId();
			Integer currentPage = 1;
			try
			{
				currentPage = Integer.valueOf(request.getParameter("cPage"));
			} catch (Exception e)
			{
				currentPage = 1;
			}

			String createDate = request.getParameter("createDate");
			if (!StringUtil.isEmpty(createDate))
			{
				paramMap.put("createDate", createDate);
			}else{
				paramMap.put("createDate", TimeUtil.date());
			}
			String queryContent = request.getParameter("queryContent");
			if (!StringUtil.isEmpty(queryContent))
			{
				paramMap.put("queryContent", queryContent);
			}
			this.getPages().setPageSize(20);
			List<Patrol> patrolList = patrolService.getPatrolListByCreateDateAndRealNameAPP(this.getPages().getPageSize(), currentPage, createDate, queryContent);
			if(!CollectionUtils.isEmpty(patrolList)){
				for(Patrol patrol : patrolList){
					List<PatrolInout> inoutList = patrolService.getInoutList(createDate, patrol.getUserId(), patrol.getPlaceId());
					patrol.setInoutList(inoutList);
				}
			}
			currentPage = currentPage + 1;
			modelMap.addAttribute("patrolList", patrolList);
			modelMap.addAttribute("patrolListSize", patrolList.size());
			modelMap.addAttribute("cPage", currentPage);
			modelMap.addAttribute("queryContent", queryContent);
			modelMap.addAttribute("createDate", createDate);
			
		}catch(Exception e)
		{
			logger.error("toPatrolListByApiKey.do出错，错误信息如下："+e);
		}

		return path;
	}
	
	@RequestMapping(value = "/toPatrolListApp.do")
	public String toPatrolListApp(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();
		User loginUser = (User) session.getAttribute("user");
		DBContextHolder.setDBType(loginUser.getSchoolId());
		String path = null;
		try{
			/*
			 * 接收页面请求参数---begin
			 */
			Integer userId = loginUser.getUserId();
			Integer currentPage = 1;
			try
			{
				currentPage = Integer.valueOf(request.getParameter("cPage"));
			} catch (Exception e)
			{
				currentPage = 1;
			}

			String createDate = request.getParameter("createDate");
			if (!StringUtil.isEmpty(createDate))
			{
				paramMap.put("createDate", createDate);
			}
			String queryContent = request.getParameter("queryContent");
			if (!StringUtil.isEmpty(queryContent))
			{
				paramMap.put("queryContent", queryContent);
			}
			this.getPages().setPageSize(20);
			List<Patrol> patrolList = patrolService.getPatrolListByCreateDateAndRealNameAPP(this.getPages().getPageSize(), currentPage, createDate, queryContent);
			if(!CollectionUtils.isEmpty(patrolList)){
				for(Patrol patrol : patrolList){
					List<PatrolInout> inoutList = patrolService.getInoutList(createDate, patrol.getUserId(), patrol.getPlaceId());
					patrol.setInoutList(inoutList);
				}
			}
			currentPage = currentPage + 1;
			modelMap.addAttribute("patrolList", patrolList);
			modelMap.addAttribute("patrolListSize", patrolList.size());
			modelMap.addAttribute("cPage", currentPage);
			modelMap.addAttribute("queryContent", queryContent);
			modelMap.addAttribute("createDate", createDate);

			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(modelMap);
			response.getWriter().write(json);
			response.getWriter().flush();
			
		}catch(Exception e)
		{
			logger.error("toPatrolListApp.do出错，错误信息如下："+e);
		}

		return path;
	}
	

	/**
	 * app进入巡更记录页面
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/toPatrolSearchApp.do")
	public String toPatrolSearchLapp(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		String apiKey = request.getParameter("apiKey");
		String schoolId = request.getParameter("schoolId");
		modelMap.addAttribute("apiKey", apiKey);
		modelMap.addAttribute("schoolId", schoolId);
		return "app/patrol/patrol_search_app";
	}
}
