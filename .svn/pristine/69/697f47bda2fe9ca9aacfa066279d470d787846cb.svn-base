package com.guotop.palmschool.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.guotop.palmschool.common.service.CommonService;
import com.guotop.palmschool.entity.Card;
import com.guotop.palmschool.entity.Clazz;
import com.guotop.palmschool.entity.Menu;
import com.guotop.palmschool.entity.Permission;
import com.guotop.palmschool.entity.Student;
import com.guotop.palmschool.entity.StudentDetail;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.entity.UserDataChangeRecords;
import com.guotop.palmschool.entity.UserRole;
import com.guotop.palmschool.listener.DBContextHolder;
import com.guotop.palmschool.service.CardService;
import com.guotop.palmschool.service.ClazzService;
import com.guotop.palmschool.service.MenuService;
import com.guotop.palmschool.service.OrderMessageService;
import com.guotop.palmschool.service.PermissionService;
import com.guotop.palmschool.service.StudentService;
import com.guotop.palmschool.service.UserDataChangeRecordsService;
import com.guotop.palmschool.service.UserService;
import com.guotop.palmschool.util.Pages;
import com.guotop.palmschool.util.StringUtil;
import com.guotop.palmschool.util.TimeUtil;
import com.guotop.palmschool.util.WebWriteFile;

import dev.gson.GsonHelper;

/**
 * 学生控制类
 * 
 * @author
 * 
 */
@RequestMapping("/student")
@Controller
public class StudentController extends BaseController
{
	@Resource
	private StudentService studentService;

	@Resource
	private CardService cardService;

	@Resource
	private CommonService commonService;
	@Resource
	private PermissionService permissionService;
	@Resource
	private MenuService menuService;
	@Resource
	private UserService userService;
	
	@Resource
	private OrderMessageService orderMessageService;
	
	@Resource
	private UserDataChangeRecordsService userDataChangeRecordsService;
	
	@Resource
	private ClazzService clazzService;
	
	private String syncObject = "1";		//同步对象1：学生
	
	private String operationClass = "student";	//操作对象

	/**
	 * 进入学生管理页面
	 */
	@RequestMapping(value = "/toStudentList.do")
	public String toStudentList(HttpServletRequest request, HttpServletResponse response, HttpSession session, Model modelMap)
	{
		// 判断是否有权限，无则跳转到首页
		User user = (User) session.getAttribute("user");
		String clazzId=request.getParameter("clazzId");
		List<Permission> permissionList = user.getPermissionList();
		modelMap.addAttribute("count", orderMessageService.getPalmOrderMessageCount());
		boolean hasPriv = false;
		String returUrl = "student/student_list";
		modelMap.addAttribute("clazzId",clazzId);
		if (permissionList != null)
		{
			for (Permission permission : permissionList)
			{
				if ("admin".equals(permission.getPermissionCode()) || "studentParentManager".equals(permission.getPermissionCode()))
				{
					hasPriv = true;
				}
			}
		}
		if (!hasPriv)
		{
			User loginUser = (User) session.getAttribute("user");

			List<Menu> menuList = new ArrayList<Menu>();
			DBContextHolder.setDBType(loginUser.getSchoolId());
			if(loginUser.getUserId() == 1)
			{
				menuList = menuService.getAllMenuInfoSysadmin(loginUser.getSchoolId(),null);
			}else
			{
				menuList = menuService.getAllMenuInfo(loginUser.getSchoolId(), 0);
			}
			modelMap.addAttribute("menuList", menuList);
			returUrl = "home/main";
		}
		return returUrl;
	}

	/**
	 * 不同权限查看到不同的page
	 * 
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/getStudentList.do")
	public String getStudentList(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			String roleId = request.getParameter("roleId");
			// 分页信息
			Integer currentPage = 1;

			try
			{
				currentPage = Integer.valueOf(request.getParameter("cPage"));
			} catch (Exception e)
			{
				currentPage = 1;
			}

			String queryContent = request.getParameter("queryContent");
			String clazzList = null;
			try
			{
				clazzList = request.getParameter("clazzList");
			} catch (Exception e)
			{
				clazzList = null;
			}

			// 选定user
			User user = (User) session.getAttribute("user");

			String userType = request.getParameter("userType");

			// 参数map
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("clazzId", user.getClazzId());
			paramMap.put("gradeId", user.getGradeId());
			paramMap.put("queryContent", queryContent);
			paramMap.put("clazzList", clazzList);
			paramMap.put("roleId", roleId);
			paramMap.put("userType", userType);
			paramMap.put("schoolId", user.getSchoolId());
			this.getPages().setPageSize(100);
			
			Pages pages =null;
			List<Card> cardList =null;
			List<User> list=null;
			boolean flag=false;
			if(!StringUtil.isFjequals(user.getSchoolId())){//非福建
				pages = studentService.getStudentListByRole(this.getPages().getPageSize(), currentPage, paramMap, user);
				list = pages.getList();
			}else{
				flag=true;
				paramMap.put("fjSchoolId",user.getFjSchoolId());
				pages = studentService.getStudentListByRoleFj(this.getPages().getPageSize(), currentPage, paramMap, user);
				list = pages.getList();
			}
			
			StringBuilder cards = new StringBuilder();
			for (User u : list)
			{
				cards.delete(0, cards.length());
				if(!flag){
					cardList = cardService.getCardListByUserId(u.getUserId());	
				}else{
					cardList = cardService.getCardListByUserIdFj(u.getUserId());	
				}
				for (Card c : cardList)
				{
					cards.append(c.getCardCode());
					cards.append(",");
				}
				if(cards.length() > 0)
				{
					u.setCardCode(cards.toString().substring(0, cards.toString().length() - 1));
				}else
				{
					u.setCardCode("");
				}
			}
			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(pages);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 通过classid 查找班级学生信息， 分页 显示
	 * 
	 */
	@RequestMapping(value = "/loadStudentListByClazzId.do")
	public String loadStudentListByClazzId(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{
			User user = (User) session.getAttribute("user");
			/*
			 * 分页信息
			 */
			Integer currentPage = 1;

			try
			{
				currentPage = Integer.valueOf(request.getParameter("cPage"));
			} catch (Exception e)
			{
				currentPage = 1;
			}
			
			/*
			 * 班级id
			 */
			Integer clazzId = null;
			try
			{
				clazzId = Integer.valueOf(request.getParameter("clazzId"));
			} catch (Exception e)
			{
				clazzId = null;
			}

			/**
			 * 参数map
			 */

			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("gradeId", user.getGradeId());
			paramMap.put("clazzId", clazzId);

			this.getPages().setPageSize(100);
			Pages pages = studentService.getStudentListByRole(this.getPages().getPageSize(), currentPage, paramMap, user);

			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(pages);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 进入增加学生页面
	 */
	@RequestMapping(value = "/toAddStudent.do")
	public String toAddStudent(HttpServletRequest request, HttpSession session, ModelMap modelMap)
	{
		/**
		 * 从session中取出指定的user
		 */
		User user = (User) session.getAttribute("user");

		/**
		 * 存放页面隐藏域
		 */
		modelMap.addAttribute("user", user);
		modelMap.addAttribute("schoolId", user.getSchoolId());

		return "student/student_add";
	}
	/**
	 * 执行增加学生逻辑
	 */
	@RequestMapping(value = "/doAddStudent.do")
	public String doAddStudent(HttpServletRequest request, HttpSession session, ModelMap modelMap)
	{
		String currentTime = TimeUtil.getInstance().now();
		boolean hasPriv = false;
		try
		{
			/**
			 * 从session中取出指定的user
			 */
			User user = (User) session.getAttribute("user");
			List<Permission> permissionList = user.getPermissionList();
			for (Permission permission : permissionList)
			{
				if ("studentParentAdd".equals(permission.getPermissionCode()) || "admin".equals(permission.getPermissionCode()))
				{
					hasPriv = true;
					break;
				}
			}
			// 有权限才进行保存操作
			if (hasPriv)
			{
				/**
				 * 学号
				 */
				String palmUserName = user.getSchoolId() + request.getParameter("code");
				String code = request.getParameter("code");

				/**
				 * 学生名称
				 */
				String name = request.getParameter("name");

				/**
				 * 家长姓名
				 */
				String parentname = request.getParameter("parentname");

				/**
				 * 手机号
				 */
				String phone = request.getParameter("phone");
				/**
				 * 学生手机号
				 */
				String studentPhone = request.getParameter("studentPhone");
				/**
				 * 家长2姓名
				 */
				String parent2name = request.getParameter("parent2name");

				/**
				 * 家长2手机号
				 */
				String phone2 = request.getParameter("phone2");

				/**
				 * 类型
				 */
				Integer type = Integer.valueOf(request.getParameter("type"));

				/**
				 * 电子卡集合
				 */
				String[] cardCodes = request.getParameterValues("cardCode");

				/**
				 * 班级名称
				 */
				String clazzname = request.getParameter("clazzname");
				// Clazz clazz = studentService.selectGradeidByClazz(clazzname);
				// 判断学生是否存在
				boolean codeFlag = userService.checkCodeIsExistInAddNewUser(code, Long.valueOf(user.getSchoolId()));
				// 不存在
				if (!codeFlag)
				{
					User saveUser = new User();
					saveUser.setCode(code);
					saveUser.setRealName(name);
					saveUser.setClazzId(Integer.valueOf(clazzname));
					saveUser.setUsername(palmUserName);
					saveUser.setPalmUserName(palmUserName);
					saveUser.setPassword(StringUtil.toMD5(code));
					saveUser.setSchoolId(user.getSchoolId());
					saveUser.setRoleCode("student");
					saveUser.setUpdateTime(currentTime);
					saveUser.setCreateTime(currentTime);
					saveUser.setCreateUserId(user.getUserId());
					saveUser.setSchoolType(String.valueOf(type));
					saveUser.setPhone(studentPhone);//学生手机号
					Map<String,Object> map=new HashMap<String, Object>();
					//map.put("palmUserName", studentPhone);
					//if(!StringUtils.isEmpty(studentPhone) && !commonService.checkUserExistsByPalmUserName(map)){
					//	saveUser.setPalmUserName(studentPhone);	//不存在以studentPhone作为palmUserName的值则使用studentPhone作为palmUserName的值，
					//}
					saveUser.setType(0);// 是否住校
					Integer studentId = 0;
					map=new HashMap<String, Object>();
					map.put("code", code);
					map.put("realName",name);
					User student = studentService.getUserByCodeRealName(map);
					if (student  != null)//已存在
					{
						studentId =student.getUserId();
						//添加学校关联
						userService.addUserAndSchoolLink(studentId, Long.valueOf(user.getSchoolId()));//表user_school
						//添加角色
						studentService.addUserRoleLink(studentId,"student");//palm_user_role
						//添加权限
					}else
					{
						studentId = studentService.addStudent(saveUser, cardCodes);//添加
					}
					
					if (studentId != 0)// 学生信息保存成功
					{
						// 判断家长是否存在
						if ((!StringUtil.isEmpty(phone)) && (!StringUtil.isEmpty(parentname)))
						{
							map=new HashMap<String, Object>();
							map.put("palmUserName", phone);
							User parentUser = userService.getUserByBindPhone(phone);
							boolean isParent1PalmUser = false;//家长是否是智慧校园用户
							boolean isParent1YixinUser = false;//家长是否是亦信用户
							boolean isParent1NewUser = false;//家长是否是新用户
							if (parentUser == null)
							{
								//判断该phone是否已经被亦信用户作为绑定手机号码,该用户仅仅是亦信账号
								//判断条件 1.bindPhone 2.user_school
								map.put("bindPhone", phone);
								parentUser = userService.getUserByBindPhone(phone);
								if(null == parentUser){
									isParent1NewUser = true;
								}else{
									if("0".equals(parentUser.getSource()) || StringUtil.isEmpty(parentUser.getSchoolId())){
										isParent1YixinUser = true;
									}else {
										isParent1NewUser = true;
									}
								}
							}else{
								isParent1PalmUser = true;
							}
							
							if(isParent1NewUser){//不存在
								parentUser = new User();
								parentUser.setRealName(parentname);
								parentUser.setCreateTime(currentTime);
								parentUser.setCreateUserId(user.getUserId());
								parentUser.setPalmUserName(phone);
								parentUser.setBindPhone(phone);
								parentUser.setPassword(StringUtil.toMD5(phone));
								parentUser.setPhone(phone);
								parentUser.setRoleCode("parent");
								parentUser.setSchoolId(user.getSchoolId());
								parentUser.setUpdateTime(currentTime);
								parentUser.setType(1);// 其它账号
								Integer parentId = studentService.addParent(parentUser, null);
								parentUser.setUserId(parentId);
							}else{
								if(isParent1YixinUser || (isParent1PalmUser && parentUser.getRealName().equals(parentname))){
									parentUser.setRealName(parentname);
									parentUser.setPalmUserName(phone);
									parentUser.setPhone(phone);
									parentUser.setCreateTime(currentTime);
									parentUser.setCreateUserId(user.getUserId());
									parentUser.setRoleCode("parent");
									parentUser.setUpdateTime(currentTime);
									parentUser.setSchoolId(user.getSchoolId());
									parentUser.setType(1);
	                               
									boolean isExistInSchool = userService.isExistsInSchool(parentUser.getUserId(), Long.valueOf(user.getSchoolId()));
									if (!isExistInSchool)
									{
										// 和学校没有关联关系，需要添加学校关系
										// 1. 添加user_school对应的信息
										// 2. 添加user_permission对应的信息
										// 3. 添加user_role对应的信息
										// 4. 添加user_card和card对应的信息
										// 5. 添加user_phones对应的信息
										studentService.addParent1(parentUser, cardCodes, isExistInSchool);
									} else
									{
										// 和学校有关联关系，
										// 查找该用户已经拥有多少角色
										// 查询条件userId
										List<UserRole> userRoleList = commonService.getUserRoleByUserId(parentUser.getUserId());
										if (userRoleList.size() > 0)
										{
											boolean flag = false;
											for (UserRole userRole : userRoleList)
											{
												// 传递进来的角色，如果该用户已经有
												if (userRole.getRoleCode().equals("parent"))
												{
													flag = true;
													break;
												}
											}

											if (!flag)
											{
												// 1. 添加user_permission对应的信息
												// 2. 添加user_role对应的信息
												// 3. 添加user_card和card对应的信息
												// 4. 添加user_phones对应的信息
												studentService.addParent1(parentUser, cardCodes, isExistInSchool);
											}

										}
									}
									
									//如果智慧校园账号为空  source是0亦信用户  则更新userbase 中的palmUserName为手机号 和source为1智慧校园用户
									if("0".equals(parentUser.getSource()))
									{
										HashMap<String,Object> paramMap = new HashMap<String, Object>();
										paramMap.put("palmUserName",phone);
										paramMap.put("source","1");
										paramMap.put("userId",parentUser.getUserId());
										userService.updateUserBase(paramMap);
									}
								}
							}
							// 保存学生家长对应关系
							studentService.addStudentAndParentLink(studentId, parentUser.getUserId());
						}
						// 判断家长2是否存在
						if ((!StringUtil.isEmpty(phone2)) && (!StringUtil.isEmpty(parent2name)))
						{
							map=new HashMap<String, Object>();
							map.put("palmUserName", phone2);
							User parent2User = userService.getUserByBindPhone(phone2);
							boolean isParent2PalmUser = false;//家长是否是智慧校园用户
							boolean isParent2YixinUser = false;//家长是否是亦信用户
							boolean isParent2NewUser = false;//家长是否是新用户
							if (parent2User == null)
							{
								//判断该phone是否已经被亦信用户作为绑定手机号码,该用户仅仅是亦信账号
								//判断条件 1.bindPhone 2.user_school
								map.put("bindPhone", phone2);
								parent2User= userService.getUserByBindPhone(phone2);
								if(null == parent2User){
									isParent2NewUser = true;
								}else{
									if("0".equals(parent2User.getSource()) || StringUtil.isEmpty(parent2User.getSchoolId())){
										isParent2YixinUser = true;
									}else {
										isParent2NewUser = true;
									}
								}
							}else{
								isParent2PalmUser = true;
							}
							if(isParent2NewUser){
								parent2User = new User();
								parent2User.setRealName(parent2name);
								parent2User.setCreateTime(currentTime);
								parent2User.setCreateUserId(user.getUserId());
								parent2User.setPalmUserName(phone2);
								parent2User.setPassword(StringUtil.toMD5(phone2));
								parent2User.setPhone(phone2);
								parent2User.setRoleCode("parent");
								parent2User.setSchoolId(user.getSchoolId());
								parent2User.setUpdateTime(currentTime);
								parent2User.setType(1);// 其它账号
								Integer parent2Id = studentService.addParent(parent2User, null);
								parent2User.setUserId(parent2Id);
							}else{
								if(isParent2YixinUser || (isParent2PalmUser && parent2User.getRealName().equals(parent2name))){

									parent2User.setRealName(parent2name);
									parent2User.setPalmUserName(phone2);
									parent2User.setPhone(phone2);
									parent2User.setCreateTime(currentTime);
									parent2User.setCreateUserId(user.getUserId());
									parent2User.setRoleCode("parent");
									parent2User.setUpdateTime(currentTime);
									parent2User.setSchoolId(user.getSchoolId());
									parent2User.setType(1);

									boolean isExistInSchool = userService.isExistsInSchool(parent2User.getUserId(), Long.valueOf(user.getSchoolId()));
									if (!isExistInSchool)
									{
										// 和学校没有关联关系，需要添加学校关系
										// 1. 添加user_school对应的信息
										// 2. 添加user_permission对应的信息
										// 3. 添加user_role对应的信息
										// 4. 添加user_card和card对应的信息
										// 5. 添加user_phones对应的信息
										studentService.addParent1(parent2User, cardCodes, isExistInSchool);
									} else
									{
										// 和学校有关联关系，
										// 查找该用户已经拥有多少角色
										// 查询条件userId
										List<UserRole> userRoleList = commonService.getUserRoleByUserId(parent2User.getUserId());
										if (userRoleList.size() > 0)
										{
											boolean flag = false;
											for (UserRole userRole : userRoleList)
											{
												// 传递进来的角色，如果该用户已经有
												if (userRole.getRoleCode().equals("parent"))
												{
													flag = true;
													break;
												}
											}

											if (!flag)
											{
												// 1. 添加user_permission对应的信息
												// 2. 添加user_role对应的信息
												// 3. 添加user_card和card对应的信息
												// 4. 添加user_phones对应的信息
												studentService.addParent1(parent2User, cardCodes, isExistInSchool);
											}
										}
									}
								
								}
								
							}
							
							//如果智慧校园账号为空  source是0亦信用户  则更新userbase 中的palmUserName为手机号 和source为1智慧校园用户
							if("0".equals(parent2User.getSource()))
							{
								HashMap<String,Object> paramMap = new HashMap<String, Object>();
								paramMap.put("palmUserName",phone2);
								paramMap.put("source","1");
								paramMap.put("userId",parent2User.getUserId());
								userService.updateUserBase(paramMap);
							}

							// 保存学生家长对应关系
							studentService.addStudentAndParentLink(studentId, parent2User.getUserId());
						}
					}

				}
			}

		} catch (Exception ex)
		{
			ex.printStackTrace();
		}

		return "student/student_list";
	}

	/**
	 * 进入修改页面
	 */
	@RequestMapping(value = "/toModifyStudentOrParent.do")
	public String toModifyStudentOrParent(HttpServletRequest request, HttpSession session, ModelMap modelMap)
	{
		User loginUser = (User) session.getAttribute("user");
		List<Permission> permissionList = loginUser.getPermissionList();
		boolean hasPriv = false;
		String nextUrl = "student/student_modify";
		for (Permission permission : permissionList)
		{
			if ("admin".equals(permission.getPermissionCode()) || "studentParentModify".equals(permission.getPermissionCode()))
			{
				hasPriv = true;
				break;
			}
		}
		if(!hasPriv){
			nextUrl = "student/student_list";
		}else{
			String studentId = request.getParameter("studentId");
			List<User> parents = studentService.getParentByStudentId(Integer.valueOf(studentId));//家长最多两个
			if(parents!=null && parents.size()>0){
				modelMap.addAttribute("parentId1", parents.get(0).getUserId());
				modelMap.addAttribute("realName1", parents.get(0).getRealName());
				modelMap.addAttribute("phone1", parents.get(0).getPhone());
			}
			if(parents!=null && parents.size()>=2){
				modelMap.addAttribute("parentId2", parents.get(1).getUserId());
				modelMap.addAttribute("realName2", parents.get(1).getRealName());
				modelMap.addAttribute("phone2", parents.get(1).getPhone());
			}
			User student = studentService.getStudentById(Integer.valueOf(studentId));//学生
			modelMap.addAttribute("student", student);
		}
		/*if (!hasPriv)
		{
			nextUrl = "student/student_list";
		} else
		{
			String studentId = request.getParameter("studentId");
			String userType = request.getParameter("userType");
			if ("parent".equals(userType))// 家长信息修改
			{
				User parent = studentService.getParentByUserId(Integer.valueOf(studentId));
				modelMap.addAttribute("parentId", studentId);
				modelMap.addAttribute("realName", parent.getRealName());
				modelMap.addAttribute("phone", parent.getPhone());
				nextUrl = "student/parent_modify";
			} else
			{
				User student = studentService.getStudentById(Integer.valueOf(studentId));
				List<User> parents = studentService.getParentByStudentId(Integer.valueOf(studentId));
				if (parents != null && parents.size() > 0)
				{
					if (parents.size() == 1)
					{
						student.setParentname(parents.get(0).getRealName());
						student.setPhone(parents.get(0).getPhone());
					} else
					{
						student.setParentname(parents.get(0).getRealName());
						student.setPhone(parents.get(0).getPhone());
						student.setParent2Name(parents.get(1).getRealName());
						student.setPhone2(parents.get(1).getPhone());
					}
				}
				modelMap.addAttribute("student", student);
			}

		}*/

		return nextUrl;
	}

	/**
	 * 加载学生电子卡列表(用于修改)
	 */
	@RequestMapping(value = "/loadStudentCardListForModify.do")
	public String loadStudentCardListForModify(HttpServletRequest request, HttpServletResponse response)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			String studentIdStr=request.getParameter("studentId");
			if(StringUtils.isEmpty(studentIdStr)){
				studentIdStr="0";
			}
			Integer studentId = Integer.valueOf(studentIdStr);
			List<Card> cardList = studentService.getCardListByStudentId(studentId);

			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(cardList);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * 执行修改逻辑
	 * 
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping(value = "/doModifyStudent.do")
	public String doModifyStudent(HttpServletRequest request, HttpSession session, ModelMap modelMap) throws UnsupportedEncodingException
	{

		/**
		 * 参数map
		 */
		Map<String, Object> paramMap = new HashMap<String, Object>();

		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		/**
		 * studentId
		 */
		Integer studentId = Integer.valueOf(request.getParameter("studentId"));

		request.setCharacterEncoding("utf-8");
		/**
		 * 学号
		 */
		String code = request.getParameter("code");

		/**
		 * 姓名
		 */
		String name = request.getParameter("name");

		/**
		 * 类型
		 */
		String type = request.getParameter("type");
		int detailType = 0;
		if (type != null)
		{
			detailType = Integer.valueOf(type);
		}

		/**
		 * 电子卡
		 */
		String[] cardCode = request.getParameterValues("cardCode");

		/**
		 * 班级
		 */
		String clazzname = request.getParameter("clazzname");

		/**
		 * 家长2 姓名
		 */
		String parent2Name = request.getParameter("parent2Name");
		/**
		 * 家长2_orig 姓名
		 */
		String parent2Name_orig = request.getParameter("parent2Name_orig");
		/**
		 * 家长2 手机
		 */
		String phone2 = request.getParameter("phone2");
		/**
		 * 家长2_orig 手机
		 */
		String phone2_orig = request.getParameter("phone2_orig");
		/**
		 * 修改时间
		 */
		String updatetime = formatter.format(new Date());

		User loginUser = (User) session.getAttribute("user");

		// Integer gradeId = clazz.getGradeid();

		paramMap.put("studentId", studentId);
		paramMap.put("code", code);
		paramMap.put("realName", name);
		paramMap.put("detailType", detailType);

		paramMap.put("schoolId", loginUser.getSchoolId());
		paramMap.put("updatetime", updatetime);
		paramMap.put("userId", studentId);
		paramMap.put("clazzId", clazzname);
		paramMap.put("createUserId", loginUser.getUserId());

		/**
		 * 修改学生信息
		 */
		studentService.modifyStudentById(paramMap);

		/**
		 * 
		 * parent2Name_orig和phone2_orig的原始值为空的时候，说明该家长是新增的家长 其实添加学生家长2关系
		 * ，并保存家长相关信息
		 */
		if (StringUtil.isEmpty(parent2Name_orig) && StringUtil.isEmpty(phone2_orig))
		{
			if ((!StringUtil.isEmpty(phone2)) && (!StringUtil.isEmpty(parent2Name)))
			{
				// 判断家长2是否存在
				String currentTime = TimeUtil.getInstance().now();
				User parent2User = commonService.getUserByPhone(phone2);
				if (null == parent2User)// 不存在
				{
					parent2User = new User();
					parent2User.setRealName(parent2Name);
					parent2User.setCreateTime(currentTime);
					parent2User.setCreateUserId(loginUser.getUserId());
					parent2User.setPalmUserName(phone2);
					parent2User.setBindPhone(phone2);
					parent2User.setPassword(StringUtil.toMD5(phone2));
					parent2User.setPhone(phone2);
					parent2User.setRoleCode("parent");
					parent2User.setSchoolId(loginUser.getSchoolId());
					parent2User.setUpdateTime(currentTime);
					parent2User.setType(1);// 其它账号
					Integer parent2Id = studentService.addParent(parent2User, null);
					parent2User.setUserId(parent2Id);
				} else
				// 设置家长与学校关联
				{
					parent2User.setRealName(parent2Name);
					parent2User.setPalmUserName(phone2);
					parent2User.setPhone(phone2);
					parent2User.setCreateTime(currentTime);
					parent2User.setCreateUserId(loginUser.getUserId());
					parent2User.setRoleCode("parent");
					parent2User.setUpdateTime(currentTime);
					parent2User.setSchoolId(loginUser.getSchoolId());
					parent2User.setType(1);

					boolean isExistInSchool = userService.isExistsInSchool(parent2User.getUserId(), Long.valueOf(loginUser.getSchoolId()));
					if (!isExistInSchool)
					{
						// 和学校没有关联关系，需要添加学校关系
						// 1. 添加user_school对应的信息
						// 2. 添加user_permission对应的信息
						// 3. 添加user_role对应的信息
						// 4. 添加user_card和card对应的信息
						// 5. 添加user_phones对应的信息
						studentService.addParent1(parent2User, null, isExistInSchool);
					} else
					{
						// 和学校有关联关系，
						// 查找该用户已经拥有多少角色
						// 查询条件userId
						List<UserRole> userRoleList = commonService.getUserRoleByUserId(parent2User.getUserId());
						if (userRoleList.size() > 0)
						{
							boolean flag = false;
							for (UserRole userRole : userRoleList)
							{
								// 传递进来的角色，如果该用户已经有
								if (userRole.getRoleCode().equals("parent"))
								{
									flag = true;
									break;
								}
							}

							if (!flag)
							{
								// 1. 添加user_permission对应的信息
								// 2. 添加user_role对应的信息
								// 3. 添加user_card和card对应的信息
								// 4. 添加user_phones对应的信息
								studentService.addParent1(parent2User, null, isExistInSchool);
							}
						}
					}
					
					//如果智慧校园账号为空  source是0亦信用户  则更新userbase 中的palmUserName为手机号 和source为1智慧校园用户
					if(!("1").equals(parent2User.getSource()))
					{
						/**
						 * 参数
						 */
						HashMap<String, Object> map = new HashMap<String, Object>();
						map.put("palmUserName",phone2);
						map.put("source","1");
						map.put("userId",parent2User.getUserId());
						userService.updateUserBase(map);
					}
				}
				// 保存学生家长对应关系
				studentService.addStudentAndParentLink(studentId, parent2User.getUserId());
				
			}
		}
		/**
		 * 电子卡相关---begin
		 */
		/**
		 * 删除此学生与所有卡之间的关联
		 */
		cardService.deleteUserCard(studentId);
		List<Card> cardList = new ArrayList<Card>();
		for (int i = 0; i < cardCode.length; i++)
		{
			Card card = new Card();
			card.setCardCode(cardCode[i]);
			card.setStatus("1");
			card.setBattery("1");
			card.setCreatetime(formatter.format(new Date()));
			card.setUpdatetime(formatter.format(new Date()));
			cardList.add(card);
		}

		cardService.addCardForUser(studentId, cardList);

		/**
		 * 电子卡相关---end
		 */

		/**
		 * 修改权限
		 */
		// commonService.modifyRoleById(paramMap);

		User user = studentService.getStudentById(studentId);
		List<UserDataChangeRecords> listOprateLogs = userDataChangeRecordsService.getNoSyncByObjectId(studentId);
		String operateType = "1";		//操作类型 1：修改
		/*
		if (CollectionUtil.isEmpty(listOprateLogs))
		{
			//用户操作日志记录增加操作
			UserDataChangeRecords userOprateLog = new UserDataChangeRecords(studentId, operateType, syncObject);
			int recordsId = userDataChangeRecordsService.addUserOprateLog(userOprateLog);
			Map<String, String> detailMap = putModifyDetailMap(user);
			for (Map.Entry<String, String> entry : detailMap.entrySet())
			{
				String key = entry.getKey();
				String value = entry.getValue();
				if (StringUtils.isEmpty(key) || StringUtils.isEmpty(value))
				{
					continue;
				}
				UserDataChangeRecordsDetail userDataChangeRecordsDetail = new UserDataChangeRecordsDetail(operationClass,operateType,key,value,recordsId);
				userDataChangeRecordsService.addDetail(userDataChangeRecordsDetail);
			}
		}else 
		{
			for(UserDataChangeRecords userDataChangeRecords:listOprateLogs){
				userDataChangeRecordsService.deleteDetailByRecordsId(userDataChangeRecords.getId());
				Map<String, String> detailMap = putDetailMap(user);
				for (Map.Entry<String, String> entry : detailMap.entrySet())
				{
					String key = entry.getKey();
					String value = entry.getValue();
					if (StringUtils.isEmpty(key) || StringUtils.isEmpty(value))
					{
						continue;
					}
					UserDataChangeRecordsDetail userDataChangeRecordsDetail = new UserDataChangeRecordsDetail(operationClass,userDataChangeRecords.getOprateType(),key,value,userDataChangeRecords.getId());
					userDataChangeRecordsService.addDetail(userDataChangeRecordsDetail);
				}
			}
		}
		*/
		
		return "student/student_list";
	}
	/**
	 * 添加学生家长
	  @author chenyong
	  @date 2016年9月20日 下午7:40:34
	 * @param response
	 * @param session
	 * @param request
	 */
	@RequestMapping("/addParent.do")
	public void addParent(HttpServletResponse response,HttpSession session,HttpServletRequest request){
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		User loginUser = (User) session.getAttribute("user");
		String phone=request.getParameter("phone");
		String parent2Name=request.getParameter("parentname");
		String studentId=request.getParameter("studentId");
		String passWord = request.getParameter("passWord");
		Integer paprentId=0;
		String isSucccess="保存成功";
		try
		{
			request.setCharacterEncoding("utf-8");
  			response.setCharacterEncoding("utf-8");
			/**
			 * 电子卡
			 */
			String[] cardCode = request.getParameter("cardCode").split(",");
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("oldPhone", "");
			map.put("phone", phone);
		/**
		 * 
		 * parent2Name_orig和phone2_orig的原始值为空的时候，说明该家长是新增的家长 其实添加学生家长2关系
		 * ，并保存家长相关信息
		 */
			if ((!StringUtil.isEmpty(phone)) && (!StringUtil.isEmpty(parent2Name)))
			{
				// 判断家长是否存在
				String currentTime = TimeUtil.getInstance().now();
				HashMap<String, Object> map2 = new HashMap<String, Object>();
				User parent2User = userService.getUserByBindPhone(phone);
				if (null == parent2User)// 不存在
				{
					parent2User = new User();
					parent2User.setRealName(parent2Name);
					parent2User.setCreateTime(currentTime);
					parent2User.setCreateUserId(loginUser.getUserId());
					parent2User.setBindPhone(phone);
					parent2User.setPalmUserName(phone);
					//TODO 需要传递过来clazzId
					parent2User.setUsername("");
					parent2User.setPassword(StringUtil.toMD5(phone));
					parent2User.setPhone(phone);
					parent2User.setRoleCode("parent");
					parent2User.setSchoolId(loginUser.getSchoolId());
					parent2User.setUpdateTime(currentTime);
					parent2User.setType(1);// 其它账号
					Integer parent2Id = studentService.addParent(parent2User, null);
					parent2User.setUserId(parent2Id);
					paprentId=parent2Id;
				} else
				// 设置家长与学校关联
				{
					paprentId=parent2User.getUserId();
					parent2User.setRealName(parent2Name);
					parent2User.setPalmUserName(phone);
					parent2User.setPhone(phone);
					parent2User.setCreateTime(currentTime);
					parent2User.setCreateUserId(loginUser.getUserId());
					parent2User.setRoleCode("parent");
					if(!StringUtil.isEmpty(passWord)){
						parent2User.setPassword(StringUtil.toMD5(passWord));	
					}
					parent2User.setUpdateTime(currentTime);
					parent2User.setSchoolId(loginUser.getSchoolId());
					parent2User.setType(1);
					boolean isExistInSchool = userService.isExistsInSchool(parent2User.getUserId(), Long.valueOf(loginUser.getSchoolId()));
					if (!isExistInSchool)
					{
						// 和学校没有关联关系，需要添加学校关系
						// 1. 添加user_school对应的信息
						// 2. 添加user_permission对应的信息
						// 3. 添加user_role对应的信息
						// 4. 添加user_card和card对应的信息
						// 5. 添加user_phones对应的信息
						studentService.addParent1(parent2User, null, isExistInSchool);
					} else
					{
						// 和学校有关联关系，
						// 查找该用户已经拥有多少角色
						// 查询条件userId
						List<UserRole> userRoleList = commonService.getUserRoleByUserId(parent2User.getUserId());
						if (userRoleList.size() > 0)
						{
							boolean flag = false;
							for (UserRole userRole : userRoleList)
							{
								// 传递进来的角色，如果该用户已经有
								if (userRole.getRoleCode().equals("parent"))
								{
									flag = true;
									break;
								}
							}

							if (!flag)
							{
								// 1. 添加user_permission对应的信息
								// 2. 添加user_role对应的信息
								// 3. 添加user_card和card对应的信息
								// 4. 添加user_phones对应的信息
								studentService.addParent1(parent2User, null, isExistInSchool);
							}
						}
					}
					//如果智慧校园账号为空  source是0亦信用户  则更新userbase 中的palmUserName为手机号 和source为1智慧校园用户
					if(!("1").equals(parent2User.getSource()))
					{
						/**
						 * 参数
						 */
						HashMap<String, Object> map1 = new HashMap<String, Object>();
						map1.put("palmUserName",phone);
						map1.put("source","1");
						map1.put("userId",parent2User.getUserId());
						userService.updateUserBase(map1);
					}
				}
				// 保存学生家长对应关系
				studentService.addStudentAndParentLink(Integer.valueOf(studentId), parent2User.getUserId());
					/**
					 * 删除此家长与所有卡之间的关联
					 */
					cardService.deleteUserCard(paprentId);
					List<Card> cardList = new ArrayList<Card>();
					for (int i = 0; i < cardCode.length; i++)
					{
						Card card = new Card();
						card.setCardCode(cardCode[i]);
						card.setStatus("1");
						card.setBattery("1");
						card.setCreatetime(formatter.format(new Date()));
						card.setUpdatetime(formatter.format(new Date()));
						cardList.add(card);
					}
					studentService.modifyParent(map);
					cardService.addCardForUser(paprentId, cardList);
				}
				
		} catch (Exception e)
		{
			isSucccess="保存失败";
			e.printStackTrace();
		}
           try
		{
			response.getWriter().write(GsonHelper.toJson(isSucccess));
			response.getWriter().flush();
		} catch (IOException e)
		{
			e.printStackTrace();
		}
	}
		/**
		 * 修改学生信息
		  @author chenyong
		  @date 2016年9月20日 下午4:14:28
		 * @param response
		 * @param session
		 * @param request
		 * @return
		 */
	      @RequestMapping("/updateStudent.do")
		  public void updateStudent(HttpServletResponse response,HttpSession session,HttpServletRequest request){
                 boolean f=true;
				try
				{
					request.setCharacterEncoding("utf-8");
		  			response.setCharacterEncoding("utf-8");
					  /**
					 * 参数map
					 */
					Map<String, Object> paramMap = new HashMap<String, Object>();
					SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					/**
					 * studentId
					 */
					Integer studentId = Integer.valueOf(request.getParameter("studentId"));
					/**
					 * 学号
					 */
					String code = request.getParameter("code");

					/**
					 * 姓名
					 */
					String name = request.getParameter("name");
					/**
					 * 学生手机号
					 */
					String studentPhone = request.getParameter("studentPhone");
					/**
					 * 类型
					 */
					String type = request.getParameter("type");
					int detailType = 0;
					if (!StringUtil.isEmpty(type))
					{
						detailType = Integer.valueOf(type);
					}
					/**
					 * 电子卡
					 */
					 String strCode= request.getParameter("cardCode");
					 String[] cardCode=strCode.split(",");
					/**
					 * 班级
					 */
					String clazzname = request.getParameter("clazzname");
					/**
					 * 修改时间
					 */
					String updatetime = formatter.format(new Date());
					User loginUser = (User) session.getAttribute("user");
					// Integer gradeId = clazz.getGradeid();
					paramMap.put("studentId", studentId);
					paramMap.put("code", code);
					paramMap.put("realName", name);
					paramMap.put("detailType", detailType);
					paramMap.put("schoolId", loginUser.getSchoolId());
					paramMap.put("updatetime", updatetime);
					paramMap.put("userId", studentId);
					paramMap.put("clazzId", clazzname);
					paramMap.put("phone", studentPhone);
					
					Map<String,Object> map=new HashMap<String, Object>();
					map.put("palmUserName", studentPhone);
					map.put("userId", studentId);
					paramMap.put("palmUserName",loginUser.getSchoolId()+code);
					paramMap.put("createUserId",loginUser.getUserId());
					paramMap.put("updateTime",formatter.format(new Date()));
					/**
					 * 修改学生信息
					 */
					studentService.modifyStudentById(paramMap);
					/**
					 * 电子卡相关---begin
					 */
					/**
					 * 删除此学生与所有卡之间的关联
					 */
					cardService.deleteUserCard(studentId);
					List<Card> cardList = new ArrayList<Card>();
					for (int i = 0; i < cardCode.length; i++)
					{
						Card card = new Card();
						card.setCardCode(cardCode[i]);
						card.setStatus("1");
						card.setBattery("1");
						card.setCreatetime(formatter.format(new Date()));
						card.setUpdatetime(formatter.format(new Date()));
						cardList.add(card);
					}
					cardService.addCardForUser(studentId, cardList);
					/**
					 * 电子卡相关---end
					 */
					User user = studentService.getStudentById(studentId);
					List<UserDataChangeRecords> listOprateLogs = userDataChangeRecordsService.getNoSyncByObjectId(studentId);
					String operateType = "1";		//操作类型 1：修改
					/*
					if (CollectionUtil.isEmpty(listOprateLogs))
					{
						//用户操作日志记录增加操作
						UserDataChangeRecords userOprateLog = new UserDataChangeRecords(studentId, operateType, syncObject);
						int recordsId = userDataChangeRecordsService.addUserOprateLog(userOprateLog);
						Map<String, String> detailMap = putModifyDetailMap(user);
						for (Map.Entry<String, String> entry : detailMap.entrySet())
						{
							String key = entry.getKey();
							String value = entry.getValue();
							if (StringUtils.isEmpty(key) || StringUtils.isEmpty(value))
							{
								continue;
							}
							UserDataChangeRecordsDetail userDataChangeRecordsDetail = new UserDataChangeRecordsDetail(operationClass,operateType,key,value,recordsId);
							userDataChangeRecordsService.addDetail(userDataChangeRecordsDetail);
						}
					}else 
					{
						for(UserDataChangeRecords userDataChangeRecords:listOprateLogs){
							userDataChangeRecordsService.deleteDetailByRecordsId(userDataChangeRecords.getId());
							Map<String, String> detailMap = putDetailMap(user);
							for (Map.Entry<String, String> entry : detailMap.entrySet())
							{
								String key = entry.getKey();
								String value = entry.getValue();
								if (StringUtils.isEmpty(key) || StringUtils.isEmpty(value))
								{
									continue;
								}
								UserDataChangeRecordsDetail userDataChangeRecordsDetail = new UserDataChangeRecordsDetail(operationClass,userDataChangeRecords.getOprateType(),key,value,userDataChangeRecords.getId());
								userDataChangeRecordsService.addDetail(userDataChangeRecordsDetail);
							}
						}
					}
					*/
				} catch (UnsupportedEncodingException e)
				{
					f=false;
					e.printStackTrace();
				}
				try
				{
					response.getWriter().write(GsonHelper.toJson(f));
					response.getWriter().flush();
				} catch (IOException e)
				{
					e.printStackTrace();
				}

		  }
	      /**
	       * 根据根据palmUserName判断家长是否存在
	        @author chenyong
	        @date 2016年9月23日 上午9:59:33
	       * @param response
	       */
	      @RequestMapping("/checkParentByPhone.do")
	      public void checkParentByPhone(HttpServletResponse response,String phone,String name){
	    	    response.setCharacterEncoding("UTF-8");
	    	    HashMap<String, Object> map2 = new HashMap<String, Object>();
				User parent2User = userService.getUserByBindPhone(phone);
				map2 = new HashMap<String, Object>();
				map2.put("flag", false);
				if(parent2User!=null && !parent2User.getRealName().equals(name)){
					map2.put("flag", true);
					List<User> userList=studentService.getStudentListByParentId(parent2User.getUserId());//根据家长获得小孩
					String studentName="";
					if(userList!=null && userList.size()>0){
					if(userList!=null && userList.size()==1){
						studentName=userList.get(0).getRealName();
					}else if(userList!=null && userList.size()>2){
						for (User user : userList)
						{
						studentName+=user.getRealName()+",";	
						}
					}
				    	map2.put("msg", "该号码已被"+studentName+"的家长:"+parent2User.getRealName()+"使用");
					}else if(userList==null || userList.size()==0){
						map2.put("msg", "该号码已被家长:"+parent2User.getRealName()+"使用");
					}else{
						List<UserRole> roles=commonService.getUserRoleByUserId(parent2User.getUserId());
						boolean f=false;
						if(roles!=null && roles.size()>0){
						for (UserRole userRole : roles)
						{
							if(userRole.getClass()!=null && userRole.getRoleCode().equals("student")){
								map2.put("msg", "该号码已被学生"+parent2User.getRealName()+"使用");
								f=true;
								break;
							}else if(userRole.getClass()!=null && userRole.getRoleCode().equals("teacher")){
								map2.put("msg", "该号码已被教师"+parent2User.getRealName()+"使用");
								f=true;
								break;
							}
						}
						}
						if(!f){
							map2.put("msg", "该号码被"+parent2User.getRealName()+"使用");	
						}
					}
				}
				try
				{
					response.getWriter().write(GsonHelper.toJson(map2));
					response.getWriter().flush();
				} catch (IOException e)
				{
					e.printStackTrace();
				}
	      }
	      /**
	  	 * 修改家长信息
	  	 * 
	  	 * @return
	  	 */
	  	@RequestMapping(value = "/doModifyParent.do")
	  	public void doModifyParent(HttpServletRequest request, HttpSession session, ModelMap modelMap,HttpServletResponse response)
	  	{
	  		
	  		Object isSuccess="保存成功";
	  		try
	  		{
	  			request.setCharacterEncoding("utf-8");
	  			response.setCharacterEncoding("utf-8");
	  			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	  			User loginUser = (User) session.getAttribute("user");
	  			String parentUserId = request.getParameter("parentId");
	  			String parentName = request.getParameter("parentname");
	  			String phone = request.getParameter("phone");
	  			String passWord = request.getParameter("passWord");
	  			/**
	  			 * 电子卡
	  			 */
	  			String[] cardCode = request.getParameter("cardCode").split(",");
	  			HashMap<String, Object> map = new HashMap<String, Object>();
	  			map.put("userId", parentUserId);
	  			map.put("realName", parentName);
	  			map.put("phone", phone);
	  			map.put("updateUserId", loginUser.getUserId());
	  			map.put("updateTime", formatter.format(new Date()));
	  			map.put("oldPhone", request.getParameter("oldPhone"));
	  			if(passWord != null && !"".equals(passWord))
	  			{
	  				map.put("passWord", StringUtil.toMD5(passWord));
	  			}
	  			//根据palmUserName，userId判断家长是否存在
	  			map.put("palmUserName", phone);
	  			boolean flag = commonService.checkUserExistsByPalmUserName(map);
	  			if (flag)//存在不修改palmUserName的值为phone的值
	  			{
	  				map.put("palmUserName", "");
	  			}
	  				/**
	  				 * 删除此家长与所有卡之间的关联
	  				 */
	  				cardService.deleteUserCard(Integer.valueOf(parentUserId));
	  				List<Card> cardList = new ArrayList<Card>();
	  				for (int i = 0; i < cardCode.length; i++)
	  				{
	  					Card card = new Card();
	  					card.setCardCode(cardCode[i]);
	  					card.setStatus("1");
	  					card.setBattery("1");
	  					card.setCreatetime(formatter.format(new Date()));
	  					card.setUpdatetime(formatter.format(new Date()));
	  					cardList.add(card);
	  				}
	  				studentService.modifyParent(map);
	  				cardService.addCardForUser(Integer.valueOf(parentUserId), cardList);
	  			

	  		} catch (Exception ex)
	  		{
	  			isSuccess="修改失败";
	  			ex.printStackTrace();
	  		}
	  		try
			{
				response.getWriter().write(GsonHelper.toJson(isSuccess));
				response.getWriter().flush();
			} catch (IOException e)
			{
				e.printStackTrace();
			}
	  		//return "student/student_list";
	  	}

	/**
	 * 执行删除逻辑
	 */
	@RequestMapping(value = "/doDeleteStudent.do")
	public String doDeleteStudent(HttpServletRequest request, HttpSession session, ModelMap modelMap)
	{
		return "student/student_list";
	}

	/**
	 * 根据班级ID加载学生列表
	 */
	@RequestMapping(value = "/selectStudentListByClazzId.do")
	public String selectStudentListByClazzId(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{
			Integer clazzId = Integer.valueOf(request.getParameter("clazzId"));
			List<User> studentList = commonService.selectStudentListByClazzId(clazzId);

			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(studentList);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 进入导入学生页面
	 */
	@RequestMapping(value = "/toImportStudent.do")
	public String toImportStudent(HttpServletRequest request, ModelMap modelMap)
	{
		String userId = request.getParameter("userId");
		modelMap.put("userId", userId);

		return "student/student_import";
	}

	/**
	 * 师生信息(详情)---begin
	 */
	/**
	 * 进入学生信息页面
	 */
	@RequestMapping(value = "/toStudentDetail.do")
	public String toStudentDetail()
	{
		return "student/student_detail";
	}

	/**
	 * 师生信息(详情)---end
	 */

	/**
	 * 进入学生详细页面
	 */
	@RequestMapping(value = "/toStudentDetailView.do")
	public String toStudentDetailView(HttpServletRequest request, ModelMap modelMap)
	{
		Integer id = Integer.valueOf(request.getParameter("id"));

		modelMap.put("id", id);

		return "student/student_detailinfo";
	}

	/**
	 * 根据根据学生ID加载学生详细信息
	 */
	@RequestMapping(value = "/loadStudentDetailInfo.do")
	public String loadStudentDetailInfo(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{
			Integer id = Integer.valueOf(request.getParameter("studentId"));
			StudentDetail studentDetail = commonService.selectStudentDetailByStudentId(id);

			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(studentDetail);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 根据根据学生ID加载学生基本信息
	 */
	@RequestMapping(value = "/loadStudentInfoForStudentDetail.do")
	public String loadStudentInfoForStudentDetail(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{
			//Integer id = Integer.valueOf(request.getParameter("studentId"));
			Student student = null;

			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(student);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表单校验---begin
	 */
	@RequestMapping(value = "/checkStudentByCode.do")
	public String checkStudentByCode(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");

		try
		{
			String code = request.getParameter("code");
			String schoolId = request.getParameter("schoolId");
			boolean codeFlag = userService.checkCodeIsExistInAddNewUser(code, Long.valueOf(schoolId));

			Gson gson = new Gson();
			String json = gson.toJson(codeFlag);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表单校验---end
	 */

	/**
	 * 表单校验---begin code 学号
	 */
	@RequestMapping(value = "/checkModifyStudentByCode.do")
	public String checkModifyStudentByCode(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap modelMap)
	{
		response.setCharacterEncoding("UTF-8");
		try
		{
			User loginUser = (User) session.getAttribute("user");
			Long schoolId = Long.valueOf(loginUser.getSchoolId());
			String code = request.getParameter("code");
			String originalcode = request.getParameter("originalcode");
			modelMap.put("code", code);
			modelMap.put("originalcode", originalcode);
			modelMap.put("schoolId", schoolId);
			boolean codeFlag = userService.checkCodeIsExistInModifyUser(originalcode, code, schoolId);
			/**
			 * flush到页面
			 */
			Gson gson = new Gson();
			String json = gson.toJson(codeFlag);
			response.getWriter().write(json);
			response.getWriter().flush();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表单校验---end
	 */
	/**
	 * 新增家长
	 * 
	 * @param request
	 * @param session
	 * @param modelMap
	 * @return update jfy 2015-11-29
	 */
	@RequestMapping(value = "/toAddParent.do")
	public String toAddParent(HttpServletRequest request, HttpSession session, ModelMap modelMap)
	{
		User loginUser = (User) session.getAttribute("user");
		List<Permission> list = loginUser.getPermissionList();
		boolean hasPriv = false;
		for (Permission p : list)
		{
			if ("admin".equals(p.getPermissionCode()) || "studentParentAdd".equals(p.getPermissionCode()))
			{
				hasPriv = true;
				break;
			}
		}
		if (hasPriv)
		{
			return "student/parent_add";
		} else
		{
			return "student/student_list";
		}

	}

	/**
	 * 新增家长
	 * 
	 * @param request
	 * @param session
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/doAddParent.do")
	public String doAddParent(HttpServletRequest request, HttpSession session, ModelMap modelMap)
	{
		boolean hasPriv = false;
		try
		{
			/**
			 * 从session中取出指定的user
			 */
			User user = (User) session.getAttribute("user");
			List<Permission> permissionList = user.getPermissionList();
			for (Permission permission : permissionList)
			{
				if ("studentParentAdd".equals(permission.getPermissionCode()) || "admin".equals(permission.getPermissionCode()))
				{
					hasPriv = true;
					break;
				}
			}
			// 有权限才进行保存操作
			if (hasPriv)
			{
				/**
				 * 学号
				 */
				String realName = request.getParameter("name");

				/**
				 * 手机号
				 */
				String phone = request.getParameter("phone");
				/**
				 * 电子卡集合
				 */
				String[] cardCodes = request.getParameterValues("cardCode");

				/**
				 * 添加家长之前先判断该用户是否存在在系统中。
				 */
				User parent = commonService.getUserByPhone(phone);
				if (parent == null)
				{
					String currentTime = TimeUtil.getInstance().now();
					parent = new User();
					parent.setRealName(realName);
					parent.setPalmUserName(phone);
					parent.setBindPhone(phone);
					parent.setPassword(StringUtil.toMD5(phone));
					parent.setPhone(phone);
					parent.setCreateTime(currentTime);
					parent.setCreateUserId(user.getUserId());
					parent.setRoleCode("parent");
					parent.setUpdateTime(currentTime);
					parent.setSchoolId(user.getSchoolId());
					parent.setType(1);
					studentService.addParent(parent, cardCodes);
				} else
				// 设置家长与学校关联
				{

					String currentTime = TimeUtil.getInstance().now();
					parent.setRealName(realName);
					parent.setPalmUserName(phone);
					parent.setPhone(phone);
					parent.setCreateTime(currentTime);
					parent.setCreateUserId(user.getUserId());
					parent.setRoleCode("parent");
					parent.setUpdateTime(currentTime);
					parent.setSchoolId(user.getSchoolId());
					parent.setType(1);

					boolean isExistInSchool = userService.isExistsInSchool(parent.getUserId(), Long.valueOf(user.getSchoolId()));
					if (!isExistInSchool)
					{
						// 和学校没有关联关系，需要添加学校关系
						// 1. 添加user_school对应的信息
						// 2. 添加user_permission对应的信息
						// 3. 添加user_role对应的信息
						// 4. 添加user_card和card对应的信息
						// 5. 添加user_phones对应的信息
						studentService.addParent1(parent, cardCodes, isExistInSchool);
						// studentService.addUserAndSchoolLink(parent.getUserId(),
						// Long.valueOf(user.getSchoolId()));
					} else
					{
						// 和学校有关联关系，
						// 查找该用户已经拥有多少角色
						// 查询条件userId
						List<UserRole> userRoleList = commonService.getUserRoleByUserId(parent.getUserId());
						if (userRoleList.size() > 0)
						{
							for (UserRole userRole : userRoleList)
							{
								// 传递进来的角色，如果该用户已经有
								if (userRole.getRoleCode().equals("parent"))
								{
									modelMap.addAttribute("message", "该家长已经存在");
									return "student/parent_add";
								}
							}
						}
						// 1. 添加user_permission对应的信息
						// 2. 添加user_role对应的信息
						// 3. 添加user_card和card对应的信息
						// 4. 添加user_phones对应的信息
						studentService.addParent1(parent, cardCodes, isExistInSchool);
					}
					
					//如果智慧校园账号为空  source是0亦信用户  则更新userbase 中的palmUserName为手机号 和source为1智慧校园用户
					if(!("1").equals(parent.getSource()))
					{
						/**
						 * 参数
						 */
						HashMap<String, Object> paramMap = new HashMap<String, Object>();
						paramMap.put("palmUserName",phone);
						paramMap.put("source","1");
						paramMap.put("userId",parent.getUserId());
						userService.updateUserBase(paramMap);
					}
				}
			}

		} catch (Exception ex)
		{
			ex.printStackTrace();
		}

		return "student/student_list";
	}
	/**
	 * 删除用户
	 * @param request
	 * @param response
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/delUser.do")
	public String delUser(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		response.setCharacterEncoding("UTF-8");
		User login = (User)session.getAttribute("user");
		String userId = request.getParameter("userId");
		String studentUserId = request.getParameter("studentUserId");
		int reCode = 0;
		try
		{
			if (userId != null && !"".equals(userId))
			{
				int userIdInt = Integer.valueOf(userId);
				Long schoolId = Long.valueOf(login.getSchoolId());
				HashMap<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("userId", userIdInt);
				paramMap.put("schoolId", schoolId);
				paramMap.put("studentUserId", studentUserId);
				studentService.delUser(paramMap);
			}
		}catch(Exception e)
		{
			e.printStackTrace();
			reCode = 1;
		}
		
		try
		{
			response.getWriter().write(String.valueOf(reCode));
			response.getWriter().flush();
		} catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 初始化detail的参数
	 * @param user
	 * @param userDetail
	 * @return
	 */
	public Map<String, String> putDetailMap(User user)
	{
		Map<String, String> detailMap = new HashMap<String, String>();
		detailMap.put("userId", String.valueOf(user.getUserId()));
		detailMap.put("boarder", String.valueOf(user.getSchoolType()));
		detailMap.put("userName", user.getRealName());
		detailMap.put("classId", String.valueOf(user.getClazzId()));
		Clazz clazz = clazzService.getClazzById(user.getClazzId());
		detailMap.put("className", clazz.getClazzName());
		detailMap.put("gradeId", String.valueOf(clazz.getGradeId()));
		detailMap.put("gradeName", clazz.getGradeName());
		detailMap.put("createTime", TimeUtil.getInstance().now());
		detailMap.put("updateTime", user.getUpdateTime());
		detailMap.put("studentNumber", user.getCode());
		return detailMap;
	}
	
	/**
	 * 初始化modify detail的参数
	 * @param user
	 * @param userDetail
	 * @return
	 */
	public Map<String, String> putModifyDetailMap(User user)
	{
		Map<String, String> detailMap = new HashMap<String, String>();
		detailMap.put("userId", String.valueOf(user.getUserId()));
		detailMap.put("boarder", String.valueOf(user.getSchoolType()));
		detailMap.put("userName", user.getRealName());
		detailMap.put("classId", String.valueOf(user.getClazzId()));
		Clazz clazz = clazzService.getClazzById(user.getClazzId());
		detailMap.put("className", clazz.getClazzName());
		detailMap.put("studentNumber", user.getCode());
		detailMap.put("updateTime", TimeUtil.getInstance().now());
		detailMap.put("passWord", user.getPassword());
		return detailMap;
	}
	/**
	 * 根据班级Id获得改班级的学生(接口，RichCloud用到)
	  @author chenyong
	  @date 2016年7月28日 上午9:47:50
	 * @param response
	 * @return
	 */
	@RequestMapping("/getStudentInfoByClassId.do")
	@ResponseBody
	public String getStudentInfoByClassId(HttpServletResponse response,HttpServletRequest request){
		response.setContentType("application/json;charset=UTF-8");
		BufferedReader br;
		try
		{
		br = new BufferedReader(new InputStreamReader(request.getInputStream(), "utf-8"));
		StringBuilder sb = new StringBuilder();
		String line = null;
		while ((line = br.readLine()) != null)
		{
			sb.append(line);
		}
		String msgInfoStr = sb.toString();
		Gson gson = new Gson();
		Map<String, Object> param = gson.fromJson(msgInfoStr, new TypeToken<Map<String, Object>>(){}.getType());
		String classId = (String)param.get("classId");
		String schoolId = (String)param.get("schoolId");
		DBContextHolder.setDBType(schoolId);
		List<User> studentList=studentService.getStudentListByClazzIdInStudentSMS(Integer.valueOf(classId));
		response.getWriter().write(GsonHelper.toJson(studentList));
		response.getWriter().flush();
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 导出查询记录
	 */
	@RequestMapping(value = "/doExportExcel.do")
	public void doExportExcel(HttpServletRequest request, HttpServletResponse response, HttpSession session)
	{
		try
		{
			response.setCharacterEncoding("UTF-8");
			request.setCharacterEncoding("UTF-8");
			
			/**
			 * 页面加载数据---begin
			 */
			User loginUser = (User) session.getAttribute("user");
			Map<String, Object> parmMap = new HashMap<String, Object>();
			String userType = request.getParameter("userType");
			String clazzIdString = request.getParameter("clazzId");
			String sheetName = null;
			String fileName = "人员列表";
			Integer clazzId = null;
			String clazzName = "";
			
 			if(!StringUtil.isEmpty(clazzIdString)){
				clazzId = Integer.valueOf(clazzIdString);
				Clazz clazz = clazzService.getClazzById(clazzId);
				clazzName = clazz.getClazzName();
			}
			
			List<User> userList = new ArrayList<User>();
			if ("parent".equals(userType))// 家长信息修改
			{
				fileName = "家长列表";
				//查询出所有家长
				if(StringUtil.isEmpty(clazzName)){
					sheetName = "所有家长";
				}else{
					sheetName = clazzName+"-家长";
				}
				parmMap.put(userType, "parent");
				
				userList = studentService.getParentListByClazzId(clazzId, loginUser.getSchoolId());
			}else{
				fileName = "学生列表";
				//查询出所有学生
				if(StringUtil.isEmpty(clazzName)){
					sheetName = "所有学生";
				}else{
					sheetName = clazzName+"-学生";
				}
				parmMap.put(userType, "student");
				userList = studentService.getStudentListByClazzIdInStudentSMS(clazzId);
			}

			/**
			 * 页面数据加载---end
			 */
			/**
			 * 初始化excel各项参数---begin
			 */
			// 创建Excel的工作书册 Workbook,对应到一个excel文档
			HSSFWorkbook wb = new HSSFWorkbook();

			// 创建Excel的工作sheet,对应到一个excel文档的tab
			HSSFSheet sheet = wb.createSheet(sheetName);

			// 创建字体样式
			HSSFFont font = wb.createFont();

			// 创建单元格样式
			HSSFCellStyle style = wb.createCellStyle();

			WebWriteFile.getInstance().init(wb, sheet, font, style);
			/**
			 * 初始化excel各项参数---end
			 */
			HSSFRow row = sheet.createRow(0);
			row.setHeight((short) 500);// 设定行的高度
			// 创建一个Excel的单元格
			HSSFCell cell = row.createCell(0);
			// 给Excel的单元格设置样式和赋值
			cell.setCellValue("ID");
			if ("parent".equals(userType)){
				style.setWrapText(true);
				cell = row.createCell(1);
				cell.setCellValue("手机号");
				
				style.setWrapText(true);
				cell = row.createCell(2);
				cell.setCellValue("姓名");
			}else{
				style.setWrapText(true);
				cell = row.createCell(1);
				cell.setCellValue("学号");
				
				style.setWrapText(true);
				cell = row.createCell(2);
				cell.setCellValue("姓名");
			}
			style.setWrapText(true);
			cell = row.createCell(3);
			cell.setCellValue("卡号");


			/**
			 * 将数据写入excel中---begin
			 */
			int i = 1;
			for (User user : userList)
			{
				row = sheet.createRow(i);
				row.setHeight((short) 500);// 设定行的高度
				style.setWrapText(true);
				
				if ("parent".equals(userType)){
					// 创建一个Excel的单元格
					cell = row.createCell(0);
					// 给Excel的单元格设置样式和赋值
					cell.setCellValue(user.getUserId());
					
					style.setWrapText(true);
					cell = row.createCell(1);
					cell.setCellValue(user.getPhone());
					
					style.setWrapText(true);
					cell = row.createCell(2);
					cell.setCellValue(user.getRealName());
				}else{
					// 创建一个Excel的单元格
					cell = row.createCell(0);
					// 给Excel的单元格设置样式和赋值
					cell.setCellValue(user.getUserId());
					
					style.setWrapText(true);
					cell = row.createCell(1);
					cell.setCellValue(user.getCode());
					
					style.setWrapText(true);
					cell = row.createCell(2);
					cell.setCellValue(user.getRealName());
				}
				i++;
			}
			/**
			 * 将数据写入excel中---end
			 */

			/**
			 * 磁盘创建文件并生出输出流
			 */
			File fp = new File("D:\\report\\");
			// 创建目录
			if (!fp.exists())
			{
				fp.mkdirs();// 目录不存在的情况下，创建目录。
			}
			File file = new File("D:\\report\\" + new Date().getTime() + ".xls");
			FileOutputStream os = new FileOutputStream(file);
			wb.write(os);
			os.close();

			WebWriteFile.getInstance().write(file, response, fileName+".xls");
			file.delete();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 进入【批量更新信息】学生页面
	 */
	@RequestMapping(value = "/batchUpdateImport.do")
	public String batchUpdateImport(HttpServletRequest request, ModelMap modelMap)
	{
		String userId = request.getParameter("userId");
		modelMap.put("userId", userId);

		return "student/student_batchUpdate_import";
	}
}
