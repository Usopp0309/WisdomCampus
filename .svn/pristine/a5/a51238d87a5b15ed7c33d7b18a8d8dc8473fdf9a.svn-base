package com.guotop.palmschool.bluetooth.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.guotop.palmschool.bluetooth.entity.BluetoothBracelet;
import com.guotop.palmschool.bluetooth.entity.BluetoothRouter;
import com.guotop.palmschool.bluetooth.entity.BluetoothStudent;
import com.guotop.palmschool.bluetooth.service.BluetoothStudentService;
import com.guotop.palmschool.bluetooth.service.BraceletService;
import com.guotop.palmschool.entity.User;
import com.guotop.palmschool.util.Pages;
import com.guotop.palmschool.util.StringUtil;
import com.richx.pojo.RichHttpResponse;

import dev.gson.GsonHelper;

/**
 * 蓝牙手环
 * 
 * @author cehnyong
 *
 */
@RequestMapping("/bracelet")
@Controller
public class braceletController {
	private Logger logger = LoggerFactory.getLogger(braceletController.class);
	@Autowired
	private BraceletService braceletService;

	@Autowired
	private BluetoothStudentService bluetoothStudentService;

	/**
	 * 进入蓝牙路由器配置页面
	 * 
	 * @author chenyong
	 * @Time 2017年4月26日 下午8:02:45
	 */
	@RequestMapping("/toRouter.do")
	public String toRouter() {

		return "asset/asset_router";

	}

	/**
	 * 获得所有的路由器
	 * 
	 * @author chenyong
	 * @Time 2017年4月26日 下午8:22:23
	 */
	@RequestMapping("getAllRouter.do")
	@ResponseBody
	public void getAllRouter(HttpServletResponse response) {
		Map<String,Object> map=new HashMap<>();
		map.put("status","");
		List<BluetoothRouter> list = braceletService.getAllBluetoothRouter(null);
		response.setCharacterEncoding("UTF-8");
		try {
			response.getWriter().write(GsonHelper.toJson(list));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 添加路由器
	 * 
	 * @author chenyong
	 * @Time 2017年4月26日 下午8:22:23
	 */
	@RequestMapping("/insertBluetoothRouter.do")
	@ResponseBody
	public void insertBluetoothRouter(HttpServletResponse response, BluetoothRouter bluetoothRouter) {
		String code = "200";
		boolean isexist=false;
		try {
			BluetoothRouter oldRouter=braceletService.getRouterByMac(bluetoothRouter.getMac());
			if(oldRouter!=null && oldRouter.getMac().equals(bluetoothRouter.getMac())){
				if(bluetoothRouter.getId()!=null && oldRouter.getId().intValue()==bluetoothRouter.getId().intValue()){//修改
					
				}else{
					isexist=true;//已存在
				}
			}
			if(!isexist){
				if(bluetoothRouter.getId()!=null){
					braceletService.updateBluetoothRouter(bluetoothRouter);
				}else{
					braceletService.insertBluetoothRouter(bluetoothRouter);	
				}	
			}else{
			 code="1";	
			}
		} catch (Exception e) {
			code = "500";
			logger.error("添加路由器" + e.getMessage());
		}
		response.setCharacterEncoding("UTF-8");
		try {
			response.getWriter().write(GsonHelper.toJson(code));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 根据蓝牙路由器的主键集合删除数据
	 * @author chenyong
	 * @Time 2017年4月27日 上午11:05:22
	 */
	@RequestMapping("/deleteRouterByIds.do")
	@ResponseBody
	public void deleteRouterByIds(HttpServletResponse response,String ids){
		    String code="200";
		try {
			if(!StringUtil.isEmpty(ids)){
				String [] idArray=ids.split(",");
				List<Integer> list=new ArrayList<>();
				for (String string : idArray) {
					list.add(Integer.parseInt(string));
				}
				braceletService.deleteRouterByIds(list);
				}
		} catch (Exception e) {
			code="500";
			logger.error("根据蓝牙路由器的主键集合删除数据:"+e.getMessage());
		}
		try {
			response.getWriter().write(GsonHelper.toJson(code));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	/**
	 * 根据主键获得蓝牙路由器
	 * @author chenyong
	 * @Time 2017年4月27日 上午10:34:52
	 */
	@RequestMapping("/getBluetoothRouterById.do")
	@ResponseBody
    public void getBluetoothRouterById(HttpServletResponse response,Integer id){
		BluetoothRouter bluetoothRouter=braceletService.getBluetoothRouterById(id);
		response.setCharacterEncoding("UTF-8");
		try {
			response.getWriter().write(GsonHelper.toJson(bluetoothRouter));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
	/**
	 * 更新路由器
	 * 
	 * @author chenyong
	 * @Time 2017年4月26日 下午8:22:23
	 */
	@RequestMapping("updateBluetoothRouter.do")
	@ResponseBody
	public void updateBluetoothRouter(HttpServletResponse response, BluetoothRouter bluetoothRouter) {
		String code = "200";
		try {
			braceletService.updateBluetoothRouter(bluetoothRouter);
		} catch (Exception e) {
			code = "500";
			logger.error("更新路由器" + e.getMessage());
		}
		response.setCharacterEncoding("UTF-8");
		try {
			response.getWriter().write(GsonHelper.toJson(code));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 进入蓝牙手环列表
	 * 
	 * @author chenyong
	 * @Time 2017年4月24日 上午10:42:42
	 */
	@RequestMapping("/toBracelet.do")
	public String toBracelet(Model model) {

		return "asset/asset_bluetooth";

	}

	/**
	 * 进入批量添加手环页面
	 * 
	 * @author chenyong
	 * @Time 2017年4月25日 下午3:42:08
	 */
	@RequestMapping("/toBathBracelet.do")
	public String toBathBracelet(Model model) {

		return "asset/asset_createTime";

	}

	/**
	 * 修改手环的状态
	 * 
	 * @author chenyong
	 * @Time 2017年4月25日 下午7:41:14
	 */
	@RequestMapping("/updateStatus.do")
	@ResponseBody
	public void updateStatus(HttpServletResponse response, Integer status, Integer id) {
		String code = "200";
		try {
			Map<String, Object> map = new HashMap<>();
			map.put("status", status);
			map.put("id", id);
			braceletService.updateStatusById(map);
		} catch (Exception e) {
			logger.error("修改手环的状态 :" + e.getMessage());
			code = "500";
		}
		try {
			response.getWriter().write(GsonHelper.toJson(code));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 批量添手环和人员的关系
	 * 
	 * @author chenyong
	 * @Time 2017年4月25日 下午4:44:56
	 */
	@RequestMapping("/savaBath.do")
	@ResponseBody
	public void savaBath(HttpServletResponse response, String jsonContent, String endTime, String startTime,
			HttpSession session) {
		String code = "200";
		try {
			User loginUser = (User) session.getAttribute("user");
			List<BluetoothStudent> list = new ArrayList<BluetoothStudent>(); // 选中的人
			Gson gson = new Gson();
			list = gson.fromJson(jsonContent, new TypeToken<List<BluetoothStudent>>() {
			}.getType());
			// 获取没有人使用的手环
			// 0:未使用，1：停用，2：使用中，3：未归还
			List<BluetoothBracelet> listBbt = braceletService.getByStatus(0);
			List<BluetoothStudent> listNew = new ArrayList<BluetoothStudent>(); // 选中的人
			List<Integer> listIds = new ArrayList<Integer>(); // 选中的人
			BluetoothStudent bluetoothStudent = null;
			for (BluetoothStudent bs : list) {
				if (listBbt != null && listBbt.size() > 0) {
					bluetoothStudent = new BluetoothStudent();
					bluetoothStudent.setBluetoothBraceletId(listBbt.get(0).getId());
					bluetoothStudent.setStartTime(startTime);
					bluetoothStudent.setEndTime(endTime);
					bluetoothStudent.setUpdateUserId(loginUser.getUserId());
					bluetoothStudent.setClazzId(bs.getClazzId());
					bluetoothStudent.setClazzName(bs.getClazzName());
					bluetoothStudent.setStudentName(bs.getStudentName());
					bluetoothStudent.setUserId(bs.getUserId());
					listNew.add(bluetoothStudent);
					listIds.add(listBbt.get(0).getId());
					listBbt.remove(0);
				} else {
					// 手环分配完了
					break;
				}
			}
			if (listNew != null && listNew.size() > 0) {
				bluetoothStudentService.savaBath(listIds, listNew);
			}
		} catch (Exception e) {
			logger.error("批量添手环和人员的关系:" + e.getMessage());
			code = "500";
		}
		try {
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(GsonHelper.toJson(code));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 根据手环的主键删除与学生的关系数据
	 * 
	 * @author chenyong
	 * @Time 2017年4月25日 下午2:04:15
	 */
	@RequestMapping("/deleteStudentBathIds.do")
	@ResponseBody
	public void deleteStudentBathIds(String ids, HttpServletResponse response) {
		String code = "200";
		try {
			String[] idArray = ids.split(",");
			List<Integer> list = new ArrayList<>();
			for (String string : idArray) {
				list.add(Integer.parseInt(string));
			}
			if (list != null && list.size() > 0) {
				bluetoothStudentService.deleteByBbIds(list);
			}
		} catch (Exception e) {
			logger.error("根据手环的主键删除与学生的关系数据:" + e.getMessage());
			code = "500";
		}
		response.setCharacterEncoding("UTF-8");
		try {
			response.getWriter().write(code);
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 获得要修改的数据
	 * 
	 * @author chenyong
	 * @Time 2017年4月25日 上午11:31:06
	 */
	@RequestMapping("/getUpdateData.do")
	@ResponseBody
	public void getUpdateData(Integer bbId, HttpServletResponse response) {
		BluetoothBracelet bluetoothBracelet = braceletService.getById(bbId);
		BluetoothStudent bluetoothStudent = bluetoothStudentService.getByBbId(bbId);
		Map<String, Object> map = new HashMap<>();
		map.put("bracelet", bluetoothBracelet);
		map.put("bluetoothStudent", bluetoothStudent);
		response.setCharacterEncoding("UTF-8");
		try {
			response.getWriter().write(GsonHelper.toJson(map));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 检查修改添加的信息
	 * 
	 * @author chenyong
	 * @Time 2017年4月25日 上午9:44:10
	 */
	@RequestMapping("/checkSave.do")
	@ResponseBody
	public void checkSave(String mac, Integer bbId, String code, Integer studentId, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<>();
		RichHttpResponse<String> rhr = new RichHttpResponse<String>();
		BluetoothStudent bluetoothStudent = null;
		BluetoothBracelet bluetoothBracelet = null;
		rhr.ResponseResult = "获取成功";
		rhr.ResponseCode = 0;
		rhr.ResponseObject = "数据没问题";
		if (bbId == null) {// 添加
			bluetoothStudent = bluetoothStudentService.getByUserId(studentId);
			map.put("mac", mac);
			boolean flag = braceletService.getCountByMacOrCode(map);
			if (flag) {
				rhr.ResponseResult = "获取成功";
				rhr.ResponseCode = 1;
				rhr.ResponseObject = "该蓝牙手环的mac已存在";
			} else if (!flag) {
				map = new HashMap<>();
				map.put("code", code);
				flag = braceletService.getCountByMacOrCode(map);
				if (flag) {
					rhr.ResponseResult = "获取成功";
					rhr.ResponseCode = 2;
					rhr.ResponseObject = "该蓝牙手环的的编号已存在";
				} else if (bluetoothStudent != null) {
					rhr.ResponseResult = "获取成功";
					rhr.ResponseCode = 3;
					rhr.ResponseObject = "该学生已有蓝牙手环";
				}
			}
		} else {// 修改
			bluetoothStudent = bluetoothStudentService.getByBbId(bbId);
			bluetoothBracelet = braceletService.getById(bbId);
			map.put("mac", mac);
			boolean flag = braceletService.getCountByMacOrCode(map);
			if (!mac.equals(bluetoothBracelet.getMac()) && flag) {
				rhr.ResponseResult = "获取成功";
				rhr.ResponseCode = 1;
				rhr.ResponseObject = "该蓝牙手环的mac已存在";
			} else if (!code.equals(bluetoothBracelet.getCode())) {
				map = new HashMap<>();
				map.put("code", code);
				if (braceletService.getCountByMacOrCode(map)) {
					rhr.ResponseResult = "获取成功";
					rhr.ResponseCode = 2;
					rhr.ResponseObject = "该蓝牙手环的的编号已存在";
				}
			} else if (bluetoothStudent != null && bluetoothStudent.getUserId().intValue() != studentId.intValue()) {
				rhr.ResponseResult = "获取成功";
				rhr.ResponseCode = 4;
				rhr.ResponseObject = "该蓝牙手环已被：" + bluetoothStudent.getClazzName() + "的"
						+ bluetoothStudent.getStudentName() + "使用，请先删除当前使用者，再添加新的使用者！";
			}
			bluetoothStudent = bluetoothStudentService.getByUserId(studentId);
			if (bluetoothStudent != null && bluetoothStudent.getBluetoothBraceletId().intValue() != bbId.intValue()) {
				rhr.ResponseResult = "获取成功";
				rhr.ResponseCode = 4;
				rhr.ResponseObject = "学生：" + bluetoothStudent.getStudentName() + " 已经有手环,你可以修改该学生的手环！";
			}
		}
		try {
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(GsonHelper.toJson(rhr));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 分页获得蓝牙手环数据
	 * 
	 * @author chenyong
	 * @Time 2017年4月21日 下午6:18:39
	 */
	@RequestMapping("/getPageBracelet.do")
	@ResponseBody
	public void getPageBracelet(HttpServletResponse response, Integer page, Integer pageSize) {
		Map<String, Object> paramMap = new HashMap<>();
		Pages<BluetoothBracelet> pages = braceletService.getPageBluetoothBracelet(page, pageSize, paramMap);
		try {
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(GsonHelper.toJson(pages));
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * 保存信息
	 * 
	 * @author chenyong
	 * @Time 2017年4月24日 下午6:10:18
	 */
	@RequestMapping("/save.do")
	@ResponseBody
	public void save(HttpSession session, BluetoothBracelet bracelet, BluetoothStudent student, Integer id_,
			HttpServletResponse response) {
		User user = (User) session.getAttribute("user");
		student.setUpdateUserId(user.getUserId());
		bracelet.setUpdateUserId(user.getUserId());
		String f = "0";
		try {
			if (id_ != null) {// 修改
				bracelet.setId(id_);
				braceletService.updateById(bracelet, student);
			} else {// 添加
				braceletService.insertBluetoothBracelet(bracelet, student);
			}
		} catch (Exception e) {
			logger.error("保存信息:" + e.getMessage());
			f = "500";
		}
		try {
			response.getWriter().write(f);
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 导入蓝牙手环
	 * 
	 * @author chenyong
	 * @Time 2017年4月24日 上午11:00:00
	 *//*
	@RequestMapping("/importBracelet.do")
	@ResponseBody
	public void importBracelet(Integer assetId, HttpSession session, @RequestParam MultipartFile braceletExce) {
		List<BluetoothBracelet> lists = new ArrayList<>();
		BluetoothBracelet bracelet = null;
		try {
			Workbook wb = WorkbookFactory.create(braceletExce.getInputStream());
			Sheet st = null;
			for (int sheetIndex = 0; sheetIndex < wb.getNumberOfSheets(); sheetIndex++) {
				st = wb.getSheetAt(sheetIndex);
				Row row1 = st.getRow(0);
				for (int rowIndex = 1; rowIndex <= st.getLastRowNum(); rowIndex++) {
					Row row = st.getRow(rowIndex);

				}
			}

		} catch (InvalidFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}*/
}
